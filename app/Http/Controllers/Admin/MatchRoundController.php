<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\ApiResourceController;
use App\Http\Controllers\Controller;
use App\Models\Match;
use App\Models\MatchEventTeam;
use App\Models\MatchIndividualCompetitor;
use App\Models\MatchRefereeRelation;
use App\Models\MatchRound;
use App\Models\MatchRoundResult;
use App\Models\MatchRoundResultRefereeRelation;
use App\Models\Record;
use App\Models\StageQualificationCompetitor;
use App\Models\StageQualificationSetting;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class MatchRoundController extends ApiResourceController
{
    public function setModel()
    {
        $this->model = new MatchRound();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function Record1vsN(Request $request)
    {
        $datas = json_decode($request->member, true);
        $winners = json_decode($request->winner, true);
        $competitors = json_decode($request->competitor, true);
        DB::beginTransaction();
        try {
            $record = Record::query()->where([
                "is_graduation_31" => 2,
                "event_id" => $request->event_id
            ])->first();
            if($record)
            {
                $value = $record->result_record;
                if($record->unit == Record::unit['hour'])
                {
                    $value = intval($value)*60*60;
                } elseif ($record->unit == Record::unit['minute']) {
                    $value = intval($value)*60;
                } elseif ($record->unit == Record::unit['kilometer']) {
                    $value = intval($value)*1000000;
                } elseif ($record->unit == Record::unit['meter']) {
                    $value = intval($value)*1000;
                } else {
                    $value = intval($value);
                }
            } else {
                $value = 0;
            }
            $match = Match::updateOrCreate(
                [
                    'id' => $request->match_id,
                ],
                [
                    'status' => $request->status
                ]
            );
            foreach ($competitors as $competitor) {
                if($competitor['participant_has'] == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['final_score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['final_score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['time']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record_time' => $competitor['final_score'],
                                    'result_record' => 0,
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $competitor['qualification_type'] == 1 )
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'participant_id' => $competitor['id'],
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                } else {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['final_score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['final_score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['time']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name']." - ".$competitor['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record_time' => $competitor['final_score'],
                                    'result_record' => 0,
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name']." - ".$competitor['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $competitor['qualification_type'] == 1)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'event_team_id' => $competitor['id']
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id']
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                }
            }
            foreach ($datas as $data) {
                $result = MatchRound::updateOrCreate(
                    [
                        'match_id' => $request->match_id,
                        'event_round_id' => $data['id'],
                    ],
                    [
                        'status' => $request->status,
                        'name' => $data['name']
                    ]
                );
                foreach ($data['member'] as $index => $member) {
                    if ($member['participant_has'] == 1) {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'competitor_id' => $member['id']
                            ],
                            ['score' => $member['score']]
                        );
                    } else {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'event_team_id' => $member['id']
                            ],
                            ['score' => $member['score']]
                        );
                    }
                    foreach ($member['foul'] as $foul) {
                        $resultFoul = MatchRoundResultRefereeRelation::updateOrCreate(
                            [
                                'match_round_result_id' => $result2->id,
                                'foul_id' => $foul['id']
                            ],
                            [
                                'score' => ($foul['count'] * $foul['score']),
                            ]
                        );
                    }
                }
            }
            foreach ($winners as $winner) {
                if($request->participant_check == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['finalScore'],
                            'is_winner' => 1
                        ]
                    );
                } else {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['finalScore'],
                            'is_winner' => 1
                        ]
                    );
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function TargetRecord1vsN(Request $request)
    {
        $members = json_decode($request->member, true);
        $dataResults = json_decode($request->result, true);
        $winners = json_decode($request->winner, true);
        Log::info($members);
        DB::beginTransaction();
        try {
            $record = Record::query()->where([
                "is_graduation_31" => 2,
                "event_id" => $request->event_id
            ])->first();
            if($record)
            {
                $value = $record->result_record;
                if($record->unit == Record::unit['hour']) {
                    $value = intval($value)*60*60;
                } elseif ($record->unit == Record::unit['minute']) {
                    $value = intval($value)*60;
                } elseif ($record->unit == Record::unit['kilometer']) {
                    $value = intval($value)*1000000;
                } elseif ($record->unit == Record::unit['meter']) {
                    $value = intval($value)*1000;
                } else {
                    $value = intval($value);
                }
            } else {
                $value = 0;
            }
            $match = Match::updateOrCreate(
                [
                    'id' => $request->match_id,
                ],
                [
                    'status' => $request->status
                ]
            );
            foreach ($dataResults as $index => $dataResult) {
                if ($dataResult['participant_has'] == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $dataResult['id'],
                        ],
                        [
                            'final_score' => $dataResult['score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $dataResult['score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($final_score > $value) {
                        Record::updateOrCreate(
                            [
                                'event_id' => $request->event_id,
                                'is_graduation_31' => 2,
                            ],
                            [
                                'taker_name' => $dataResult['name'],
                                'take_place' => "graduation 31 - Vietnam",
                                'unit' => $request->unit,
                                'take_time' => date("Y-m-d"),
                                'result_record' => $dataResult['score'],
                                'country_id' => $dataResult['team']['country_id']
                            ]
                        );
                        $value = $final_score;
                    }
                } else {
                    $result_competitor =  MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $dataResult['id'],
                        ],
                        [
                            'final_score' => $dataResult['score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $dataResult['score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($final_score > $value) {
                        Record::updateOrCreate(
                            [
                                'event_id' => $request->event_id,
                                'is_graduation_31' => 2,
                            ],
                            [
                                'taker_name' => $dataResult['name'],
                                'take_place' => "graduation 31 - Vietnam",
                                'unit' => $request->unit,
                                'take_time' => date("Y-m-d"),
                                'result_record' => $dataResult['score'],
                                'country_id' => $dataResult['team']['country_id']
                            ]
                        );
                        $value = $final_score;
                    }
                }
            }
            foreach ($winners as $winner) {
                if ($request->participant_check == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                } else {
                    $result_competitor =  MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                }
            }
            $delete = MatchRound::query()->where('match_id', $request->match_id)->delete();
            foreach ($members as $round) {
                $result = MatchRound::updateOrCreate([
                    'match_id' => $round['match_id'],
                    'name' => $round['name']
                ], [
                    'status' => $round['status'],
                ]);
                foreach ($round['member'] as $member) {
                    if ($member['participant_has'] == 1) {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'competitor_id' => $member['competitor_id']
                            ],
                            [
                                'score' => $member['score'],
                                'turn' => $member['turn']
                            ]
                        );
                        if($request->next_stage_id == 1 && $member['qualified_to_stage_id'] != 0)
                        {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $member['competitor_id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['competitor_id'],
                                ])->update([
                                    'qualification_type' => $member['qualification_type'],
                                    'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                    'team_id' => $member['team_id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['competitor_id'],
                                    'qualification_type' => $member['qualification_type'],
                                    'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                    'team_id' => $member['team_id']
                                ]);
                            }
                        } else {
                            if($member['qualification_type'] == 0) {
                                $qualification = StageQualificationCompetitor::query()->where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['competitor_id'],
                                ])->delete();
                            } else {
                                $qualification = StageQualificationCompetitor::query()->where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['competitor_id'],
                                ])->first();
                                if($qualification) {
                                    StageQualificationCompetitor::where([
                                        'stage_id' => $request->stage_id,
                                        'participant_id' => $member['competitor_id'],
                                    ])->update([
                                        'qualification_type' => $member['qualification_type'],
                                        'team_id' => $member['team_id']
                                    ]);
                                } else {
                                    StageQualificationCompetitor::create([
                                        'stage_id' => $request->stage_id,
                                        'participant_id' => $member['competitor_id'],
                                        'qualification_type' => $member['qualification_type'],
                                        'team_id' => $member['team_id']
                                    ]);
                                }
                            }
                        }
                    } else {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'event_team_id' => $member['event_team_id']
                            ],
                            [
                                'score' => $member['score'],
                                'turn' => $member['turn']
                            ]
                        );
                        if($request->next_stage_id == 1 && $member['qualified_to_stage_id'] != 0)
                        {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $member['event_team_id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['event_team_id'],
                                ])->update([
                                    'qualification_type' => $member['qualification_type'],
                                    'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                    'team_id' => $member['team_id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['event_team_id'],
                                    'qualification_type' => $member['qualification_type'],
                                    'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                    'team_id' => $member['team_id']
                                ]);
                            }
                        } else {
                            if($member['qualification_type'] == 0) {
                                $qualification = StageQualificationCompetitor::query()->where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['event_team_id'],
                                ])->delete();
                            } else {
                                $qualification = StageQualificationCompetitor::query()->where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['event_team_id'],
                                ])->first();
                                if($qualification) {
                                    StageQualificationCompetitor::where([
                                        'stage_id' => $request->stage_id,
                                        'event_team_id' => $member['event_team_id'],
                                    ])->update([
                                        'qualification_type' => $member['qualification_type'],
                                        'team_id' => $member['team_id']
                                    ]);
                                } else {
                                    StageQualificationCompetitor::create([
                                        'stage_id' => $request->stage_id,
                                        'event_team_id' => $member['event_team_id'],
                                        'qualification_type' => $member['qualification_type'],
                                        'team_id' => $member['team_id']
                                    ]);
                                }
                            }
                        }
                    }
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }
    public function Score1vsN(Request $request)
    {
        $members = json_decode($request->member, true);
        $winners = json_decode($request->winner, true);
        $competitors = json_decode($request->competitor, true);
        DB::beginTransaction();
        try {
            $match = Match::updateOrCreate(
                [
                    'id' => $request->match_id,
                ],
                [
                    'status' => $request->status
                ]
            );
            $record = Record::query()->where([
                "is_graduation_31" => 2,
                "event_id" => $request->event_id
            ])->first();
            if($record)
            {
                $value = $record->result_record;
                if($record->unit == Record::unit['hour']) {
                    $value = intval($value)*60*60;
                } elseif ($record->unit == Record::unit['minute']) {
                    $value = intval($value)*60;
                } elseif ($record->unit == Record::unit['kilometer']) {
                    $value = intval($value)*1000000;
                } elseif ($record->unit == Record::unit['meter']) {
                    $value = intval($value)*1000;
                } else {
                    $value = intval($value);
                }
            } else {
                $value = 0;
            }
            foreach ($competitors as $competitor) {
                if($competitor['participant_has'] == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['final_score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['final_score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['hour'] || $request->unit == Record::unit['minute'] || $request->unit == Record::unit['seconds']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $competitor['qualification_type'] == 1)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'participant_id' => $competitor['id'],
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                } else {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['final_score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['final_score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['hour'] || $request->unit == Record::unit['minute'] || $request->unit == Record::unit['seconds']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name']." - ".$competitor['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $competitor['name']." - ".$competitor['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $competitor['final_score'],
                                    'country_id' => $competitor['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $competitor['qualification_type'] == 1)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'event_team_id' => $competitor['id']
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id']
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                }
            }
            foreach ($members as $member) {
                $result = MatchRound::updateOrCreate([
                    'match_id' => $request->match_id,
                    'event_round_id' => $member['id'],
                ], [
                    'status' => $request->status,
                    'name' => $member['name'],
                ]);
                foreach ($member['member'] as $index => $competitor) {
                    $count = count($member['member']);
                    if ($competitor['participant_has'] == 1) {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'competitor_id' => $competitor['id']
                            ],
                            ['score' => $competitor['score']]
                        );
                    } else {
                        $result2 = MatchRoundResult::updateOrCreate(
                            [
                                'match_round_id' => $result->id,
                                'event_team_id' => $competitor['id']
                            ],
                            ['score' => $competitor['score']]
                        );
                    }
                    foreach ($competitor['referee'] as $referee) {
                        $result3 = MatchRoundResultRefereeRelation::updateOrCreate([
                            'match_round_result_id' => $result2->id,
                            'match_referee_id' => $referee['match_referee_id'],
                        ], [
                            'score' => $referee['score'],
                        ]);
                    }
                }
            }
            if($request->participant_check == 1) {
                foreach ($winners as $winner) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                }
            } else {
                foreach ($winners as $winner) {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }
    public function Record1vsNNoRound (Request $request)
    {
        $datas = json_decode($request->member, true);
        $winners = json_decode($request->winner, true);
        DB::beginTransaction();
        try {
            $match = Match::updateOrCreate(
                [
                    'id' => $request->match_id,
                ],
                [
                    'status' => $request->status
                ]
            );
            $record = Record::query()->where([
                "is_graduation_31" => 2,
                "event_id" => $request->event_id
            ])->first();
            if($record)
            {
                $value = $record->result_record;
                if($record->unit == Record::unit['hour']) {
                    $value = intval($value)*60*60;
                } elseif ($record->unit == Record::unit['minute']) {
                    $value = intval($value)*60;
                } elseif ($record->unit == Record::unit['kilometer']) {
                    $value = intval($value)*1000000;
                } elseif ($record->unit == Record::unit['meter']) {
                    $value = intval($value)*1000;
                } else {
                    $value = intval($value);
                }
            } else {
                $value = 0;
            }
            foreach ($datas as $index => $member) {
                if ($member['participant_has'] == 1) {
                    $result2 = MatchRoundResult::updateOrCreate(
                        [
                            'match_individual_competitor_id' => $member['match_round_result'],
                        ],
                        ['score' => $member['score']]
                    );
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $member['id'],
                        ],
                        [
                            'final_score' => $member['finalScore'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $member['finalScore'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['time']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $member['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => 0,
                                    'result_record_time' => $member['finalScore'],
                                    'country_id' => $member['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $member['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $member['finalScore'],
                                    'country_id' => $member['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $member['qualified_to_stage_id'] != 0)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'participant_id' => $member['id'],
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $member['id'],
                            ])->update([
                                'qualification_type' => $member['qualification_type'],
                                'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                'team_id' => $member['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $member['id'],
                                'qualification_type' => $member['qualification_type'],
                                'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                'team_id' => $member['team']['id']
                            ]);
                        }
                    } else {
                        if($member['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $member['id'],
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $member['id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['id'],
                                ])->update([
                                    'qualification_type' => $member['qualification_type'],
                                    'team_id' => $member['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $member['id'],
                                    'qualification_type' => $member['qualification_type'],
                                    'team_id' => $member['team']['id']
                                ]);
                            }
                        }
                    }
                } else {
                    $result2 = MatchRoundResult::updateOrCreate(
                        [
                            'match_event_team_id' => $member['match_round_result'],
                        ],
                        ['score' => $member['score']]
                    );
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $member['id'],
                        ],
                        [
                            'final_score' => $member['finalScore'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $member['finalScore'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($request->unit == Record::unit['time']) {
                        if($final_score < $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $member['name']." - ".$member['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => 0,
                                    'result_record_time' => $member['finalScore'],
                                    'country_id' => $member['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    } else {
                        if($final_score > $value) {
                            Record::updateOrCreate(
                                [
                                    'event_id' => $request->event_id,
                                    'is_graduation_31' => 2,
                                ],
                                [
                                    'taker_name' => $member['name']." - ".$member['team']['name'],
                                    'take_place' => "graduation 31 - Vietnam",
                                    'unit' => $request->unit,
                                    'take_time' => date("Y-m-d"),
                                    'result_record' => $member['finalScore'],
                                    'country_id' => $member['team']['country_id']
                                ]
                            );
                            $value = $final_score;
                        }
                    }
                    if($request->next_stage_id == 1 && $member['qualified_to_stage_id'] != 0)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'event_team_id' => $member['id'],
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $member['id'],
                            ])->update([
                                'qualification_type' => $member['qualification_type'],
                                'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                'team_id' => $member['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $member['id'],
                                'qualification_type' => $member['qualification_type'],
                                'qualified_to_stage_id' => $member['qualified_to_stage_id'],
                                'team_id' => $member['team']['id']
                            ]);
                        }
                    } else {
                        if($member['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $member['id'],
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $member['id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['id'],
                                ])->update([
                                    'qualification_type' => $member['qualification_type'],
                                    'team_id' => $member['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $member['id'],
                                    'qualification_type' => $member['qualification_type'],
                                    'team_id' => $member['team']['id']
                                ]);
                            }
                        }
                    }
                }
                foreach ($member['foul'] as $foul) {
                    $resultFoul = MatchRoundResultRefereeRelation::updateOrCreate(
                        [
                            'match_round_result_id' => $result2->id,
                            'foul_id' => $foul['id']
                        ],
                        [
                            'score' => ($foul['count'] * $foul['score']),
                        ]
                    );
                }
            }
            foreach ($winners as $winner) {
                if($request->participant_check == 1) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['finalScore'],
                            'is_winner' => 1
                        ]
                    );
                } else {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['finalScore'],
                            'is_winner' => 1
                        ]
                    );
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function Score1vsNNoRound (Request $request)
    {
        $members = json_decode($request->member, true);
        $winners = json_decode($request->winner, true);
        DB::beginTransaction();
        try {
            $match = Match::updateOrCreate(
                [
                    'id' => $request->match_id,
                ],
                [
                    'status' => $request->status
                ]
            );
            $record = Record::query()->where([
                "is_graduation_31" => 2,
                "event_id" => $request->event_id
            ])->first();
            if($record)
            {
                $value = $record->result_record;
                if($record->unit == Record::unit['hour']) {
                    $value = intval($value)*60*60;
                } elseif ($record->unit == Record::unit['minute']) {
                    $value = intval($value)*60;
                } elseif ($record->unit == Record::unit['kilometer']) {
                    $value = intval($value)*1000000;
                } elseif ($record->unit == Record::unit['meter']) {
                    $value = intval($value)*1000;
                } else {
                    $value = intval($value);
                }
            } else {
                $value = 0;
            }
            foreach ($members as $index => $competitor) {
                if ($competitor['participant_has'] == 1) {
                    $result2 = MatchRoundResult::updateOrCreate(
                        [
                            'match_individual_competitor_id' => $competitor['match_round_result'],
                        ],
                        ['score' => $competitor['score']]
                    );
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($final_score > $value) {
                        Record::updateOrCreate(
                            [
                                'event_id' => $request->event_id,
                                'is_graduation_31' => 2,
                            ],
                            [
                                'taker_name' => $competitor['name'],
                                'take_place' => "graduation 31 - Vietnam",
                                'unit' => $request->unit,
                                'take_time' => date("Y-m-d"),
                                'result_record' => $competitor['score'],
                                'country_id' => $competitor['team']['country_id']
                            ]
                        );
                        $value = $final_score;
                    }
                    if($request->next_stage_id == 1 && $competitor['qualified_to_stage_id'] != 0)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'participant_id' => $competitor['id'],
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'participant_id' => $competitor['id'],
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'participant_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                } else {
                    $result2 = MatchRoundResult::updateOrCreate(
                        [
                            'match_event_team_id' =>  $competitor['match_round_result'],
                        ],
                        ['score' => $competitor['score']]
                    );
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $competitor['id'],
                        ],
                        [
                            'final_score' => $competitor['score'],
                            'is_winner' => 2
                        ]
                    );
                    $final_score = $competitor['score'];
                    if($request->unit == Record::unit['hour']) {
                        $final_score = intval($final_score)*60*60;
                    } elseif ($request->unit == Record::unit['minute']) {
                        $final_score = intval($final_score)*60;
                    } elseif ($request->unit == Record::unit['kilometer']) {
                        $final_score = intval($final_score)*1000000;
                    } elseif ($request->unit == Record::unit['meter']) {
                        $final_score = intval($final_score)*1000;
                    } else {
                        $final_score = intval($final_score);
                    }
                    if($final_score > $value) {
                        Record::updateOrCreate(
                            [
                                'event_id' => $request->event_id,
                                'is_graduation_31' => 2,
                            ],
                            [
                                'taker_name' => $competitor['name']." - ".$competitor['team']['name'],
                                'take_place' => "graduation 31 - Vietnam",
                                'unit' => $request->unit,
                                'take_time' => date("Y-m-d"),
                                'result_record' => $competitor['score'],
                                'country_id' => $competitor['team']['country_id']
                            ]
                        );
                        $value = $final_score;
                    }
                    if($request->next_stage_id == 1 && $competitor['qualified_to_stage_id'] != 0)
                    {
                        $qualification = StageQualificationCompetitor::query()->where([
                            'stage_id' => $request->stage_id,
                            'event_team_id' => $competitor['id']
                        ])->first();
                        if($qualification) {
                            StageQualificationCompetitor::where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->update([
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        } else {
                            StageQualificationCompetitor::create([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id'],
                                'qualification_type' => $competitor['qualification_type'],
                                'qualified_to_stage_id' => $competitor['qualified_to_stage_id'],
                                'team_id' => $competitor['team']['id']
                            ]);
                        }
                    } else {
                        if($competitor['qualification_type'] == 0) {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->delete();
                        } else {
                            $qualification = StageQualificationCompetitor::query()->where([
                                'stage_id' => $request->stage_id,
                                'event_team_id' => $competitor['id']
                            ])->first();
                            if($qualification) {
                                StageQualificationCompetitor::where([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id']
                                ])->update([
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            } else {
                                StageQualificationCompetitor::create([
                                    'stage_id' => $request->stage_id,
                                    'event_team_id' => $competitor['id'],
                                    'qualification_type' => $competitor['qualification_type'],
                                    'team_id' => $competitor['team']['id']
                                ]);
                            }
                        }
                    }
                }
                foreach ($competitor['referee'] as $referee) {
                    $result3 = MatchRoundResultRefereeRelation::updateOrCreate([
                        'match_round_result_id' => $result2->id,
                        'match_referee_id' => $referee['match_referee_id'],
                    ], [
                        'score' => $referee['score'],
                    ]);
                }
            }
            if($request->participant_check == 1) {
                foreach ($winners as $winner) {
                    $result_competitor = MatchIndividualCompetitor::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'competitor_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                }
            } else {
                foreach ($winners as $winner) {
                    $result_competitor = MatchEventTeam::updateOrCreate(
                        [
                            'match_id' => $request->match_id,
                            'event_team_id' => $winner['id'],
                        ],
                        [
                            'final_score' => $winner['score'],
                            'is_winner' => 1
                        ]
                    );
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function addFilter($request)
    {
        $this->query->with(['match', 'result', 'event_round']);
    }

    public function addAppend()
    {
        $this->query->with(['match', 'result', 'event_round']);
    }
}
