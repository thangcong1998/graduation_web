<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\ApiResourceController;
use App\Http\Controllers\Controller;
use App\Jobs\RenderExcelJob;
use App\Models\Permission;
use App\Models\User;
use Illuminate\Http\Request;
use App\Http\Requests\TeamCreateRequest;
use App\Models\Team;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use function Symfony\Component\String\s;
use App\Http\Requests\TeamUpdateRequest;
use App\Exports\DataExport;
use Maatwebsite\Excel\Facades\Excel;

class TeamController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new Team();
    }
    public function __construct()
    {
        parent::__construct();
        //
        //        $this->middleware('auth');
        //        $this->middleware(function ($request, $next) {

        //
        //            return $next($request);
        //        });
    }

    public function index(Request $request)
    {
        $this->_filter($request);
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        $this->_filter($request);
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(TeamCreateRequest $request)
    {
        try {
            DB::beginTransaction();
            $data = $request->only($this->model->getFillable());
            $result = $this->query->create($data);
            $permission = Permission::query()->where('name', '=', 'all_team')->first();
            $perm = Permission::query()->create([
                'name' => $result->name,
                'display_name' => $result->name,
                'english_name' => $result->english_name,
                'guard_name' => 'api',
                'module_id' => $permission['module_id']
            ]);
            DB::commit();
            Artisan::call('cache:clear');
            return $this->createResultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return response()->json(['error' => 'server_error', $e], 500);
        }
    }

    public function update(TeamUpdateRequest $request, $id)
    {
        $data = $request->only($this->model->getFillable());
        $item = $this->query->where('id', $id)->first();
        try {
            DB::beginTransaction();
            $oldName = $item['name'];
            $item->fill($data)->save();
            DB::commit();
            return $this->resultResponse($item);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return response()->json(['error' => 'server_error', $e], 500);
        }
    }

    private function _filter(Request $request)
    {
        $this->query->with('Country');

        if ($request->perm) {
            $user = Auth::user();
            $user = User::query()->find($user->id);
            if (!$user->hasPermissionTo('all_team')) {
                $teams = Team::query()->get();
                $team_ids = [];
                if ($teams) {
                    foreach ($teams as $key => $t) {
                        if ($user->hasPermissionTo($t->name)) {
                            $team_ids[] = $t->id;
                        }
                    }
                    $this->query->whereIn('id', $team_ids);
                }
            }
        }

        if ($request->name) {
            $this->query->where('name', 'like', '%' . $request->name . '%');
        }

        if ($request->get('sort')) {
            $sort = explode('|', $request->get('sort'));
            $this->query->orderBy($sort[0], $sort[1]);
        }
        if ($request->user_id) {
            if ($request->user_id == 'team') {
                $this->query->where('user_id', '=', null);
            } else {
                $this->query->where('user_id', '=', $request->user_id);
            }
        }

        if ($request->trashed) {
            $this->query->onlyTrashed();
        }
    }
    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            $fields[] = $column['field'];
            $header[] = $column['title'];
        }
        $data = [];
        $team = $this->query->whereIn('id', $id)->with(['Country'])->get();
        foreach ($team as $key => $value) {
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
            }
            // return $data[$key]['is_sport_team'];
            if (isset($data[$key]['is_sport_team'])) {
                if ($data[$key]['is_sport_team'] == 2) {
                    $is_sport_team = 'Yes';
                } else {
                    $is_sport_team = 'No';
                }
            }
            isset($data[$key]['is_sport_team']) && $data[$key]['is_sport_team'] = $is_sport_team;

            isset($data[$key]['country_id']) && $data[$key]['country_id'] = $value['Country']['name'];
        }
        return Excel::download(new DataExport($id, $header, $data), 'Team.xlsx');
    }

    public function destroy(Request $request, $id)
    {
        $team = Team::query()->where('id', $id)->first();
        $user = User::query()->where('id', $team->user_id)->first();
        $permission = Permission::query()->where('name', $team->name)->first();
        $permission->delete();
        if ($user) {
            $user->forceDelete();
        }
        $team->forceDelete();
        return $this->deleteResultResponse($team);
        //        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }
    public function bulkDelete(Request $request)
    {
        $ids = json_decode($request->ids);
        $team = '';
        foreach ($ids as $id) {
            $team = Team::query()->where('id', $id)->first();
            $user = User::query()->where('id', $team->user_id)->first();
            $permission = Permission::query()->where('name', $team->name)->first();
            $permission->delete();
            if ($user) {
                $user->forceDelete();
            }
            $team->forceDelete();
        }
        return $this->deleteResultResponse($team);
    }
}
