<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Http\Controllers\Controller;
use App\Http\Controllers\ApiResourceController;
use App\Models\CompetitorVenue;
use App\Models\CompetitorVenueEventField;
use App\Models\CompetitorVenueEventRelation;
use App\Models\Files;
use App\Models\PositionEventField;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;

class CompetitorVenueController extends ApiResourceController
{
    public function setModel()
    {
        $this->model = new CompetitorVenue();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }
    public function store(Request $request)
    {
        $data = $request->only($this->model->getFillable());
        DB::beginTransaction();
        try {
            if($request->position) {
                $positions = json_decode($request->position, true);
                foreach ($positions as $relations) {
                    $relation = CompetitorVenueEventRelation::create([
                        'competitor_venue_id' => $request->venue_id,
                        'event_id' => $relations['event']['id']
                    ]);
                    foreach ($relations['position'] as $fields) {
                        $field = CompetitorVenueEventField::create([
                            'competitor_venue_event_id' => $relation->id,
                            'name' => $fields['name'],
                            'english_name' => $fields['english_name'],
                            'description' => 'None'
                        ]);
                        foreach ($fields['position'] as $position) {
                            $data = PositionEventField::create([
                                'name' => $position['name'],
                                'english_name' => $position['english_name'],
                                'event_field_id' => $field->id,
                            ]);
                        }
                    }
                }
            }
            DB::commit();
            return $this->createResultResponse($data);
        }catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function update(Request $request, $id)
    {
        DB::beginTransaction();
        try {
            if($request->position) {
                $array_relation = [];
                $array_field = [];
                $array_position = [];
                $positions = json_decode($request->position, true);
                foreach ($positions as $relations) {
                    $relation = CompetitorVenueEventRelation::updateOrCreate([
                        'competitor_venue_id' => $request->venue_id,
                        'event_id' => $relations['event']['id']
                    ]);
                    array_push($array_relation, $relation->id);
                    foreach ($relations['position'] as $fields) {
                        $field = CompetitorVenueEventField::updateOrCreate([
                            'competitor_venue_event_id' => $relation->id,
                            'name' => $fields['name'],
                            'english_name' => $fields['english_name'],
                            'description' => 'None'
                        ]);
                        array_push($array_field, $field->id);
                        foreach ($fields['position'] as $position) {
                            $data = PositionEventField::updateOrCreate([
                                'name' => $position['name'],
                                'english_name' => $position['english_name'],
                                'event_field_id' => $field->id,
                            ]);
                            array_push($array_position, $data->id);
                        }
                        PositionEventField::query()->where('event_field_id', $field->id)->whereNotIn('id', $array_position)->delete();
                    }
                    CompetitorVenueEventField::query()->where('competitor_venue_event_id', $relation->id)->whereNotIn('id', $array_field)->delete();
                }
                CompetitorVenueEventRelation::query()->where('competitor_venue_id', $request->venue_id)->whereNotIn('id', $array_relation)->delete();
            }
            DB::commit();
            return $this->resultResponse(1);

        }catch (\Exception $e){
            DB::rollBack();
            return $this->errorResponseSystem($e);
        }
    }
    public function destroy(Request $request, $id)
    {
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }


    public function addFilter($request)
    {
        $this->query->with(
            'files',
            'venue_training_place.sport',
            'venue_competition_place.sport',
            'region',
            'venue_relation.event_field.position_field',
            'venue_relation.event.sportDiscipline.sport'
        );
    }

    public function addAppend()
    {
        $this->query->with(
            'files',
            'venue_training_place.sport',
            'venue_competition_place.sport',
            'region',
            'venue_relation.event_field.position_field',
            'venue_relation.event.sportDiscipline.sport'
        );
    }

    public function deleteList (Request $request)
    {
        try{
            DB::beginTransaction();
            if($request->action == 'force')
            {
                $id = json_decode($request->ids);

                $delete = CompetitorVenue::whereIn('id',$id)->forceDelete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            }
            else
            {
                $id = json_decode($request->ids);

                $delete = CompetitorVenue::whereIn('id',$id)->delete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            }
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem($e);
        }
    }

    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header= [];
        $fields=[];
        $columns = json_decode($request->columns,true);
        foreach($columns as $column){
            if( $column['field'] == 'flag'){

            } else{
                $fields[]=$column['field'];
                $header[] = $column['title'];
            }
        }
        $data=[];
        $venue = $this->query->whereIn('id',$id)->get();
        foreach ($venue as $key => $value) {
            // $data[$key]['No']=$key+1;
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
            }
        }
        return Excel::download(new DataExport($id,$header,$data), 'venue.xlsx');
    }

    protected function UploadFile(Request $request) {
        if ($request->hasFile('upload')) {
            $file = $request->file('upload');
            $img = Storage::disk('public')->put('upload', $file);
            $url = Storage::url($img);
            return response()->json(array('location' => $url));
        }
        else {
            $file = $request->file('files');
            return response()->json('khong luu duoc anh');
        }
    }

    protected function upload($files, $model, $url)
    {
        foreach ($files['files'] as $file) {
            $path = Storage::disk('public')->put('venue/', $file);
            $originName = $file->getClientOriginalName();
            $attachment = Files::create([
                'name' => $originName,
                'path' => $path,
            ]);
            $model->files()->save($attachment);
        }
    }
    public function syncFiles($attachment_relations, $document)
    {
        $oldIds = $document->files()->pluck('id')->all();
        $newIds = [];
        foreach ($attachment_relations as $index => $file) {
            array_push($newIds, $file['id']);
        }
        $deleteIds = [];
        foreach ($oldIds as $oldId) {
            if (!in_array($oldId, $newIds)) {
                $deleteIds[] = $oldId;
            }
        }
        $paths = [];
        foreach ($deleteIds as $id) {
            $attachment = Files::where('id', $id)->first();
            if ($attachment != null) {
                array_push($paths, $attachment->path);
                $attachment->delete();
            }
        }
        foreach ($paths as $path) {
            Storage::disk('public')->delete($path);
        }
    }
}
