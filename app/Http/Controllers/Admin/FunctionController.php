<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Jobs\FormPdfJob;
//use App\Models\Staff;
//use App\Models\StaffGroupMember;
//use App\Models\Volunteer;
//use App\Models\VolunteerGroupMember;
//use App\Models\VolunteerTrainingHistory;
use Barryvdh\DomPDF\Facade as PDF;
use Dompdf\Options;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;
use App\Http\Controllers\ApiResourceController;
use Illuminate\Http\Request;
use App\Models\Functions;
use App\Http\Requests\FunctionCreateRequest;
use App\Http\Requests\FunctionUpdateRequest;
use Illuminate\Support\Facades\DB;
use App\Helpers\SyncDataSeagameGms;
use Illuminate\Support\Facades\Lang;

class FunctionController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new Functions();
    }

    public function index(Request $request)
    {
        $this->_filter($request);
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        $this->_filter($request);
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(FunctionCreateRequest $request)
    {
        try {
            DB::beginTransaction();
            $data = $request->only($this->model->getFillable());
            $result = $this->query->create($data);
            $area = json_decode($request->area);
            $zone = json_decode($request->zone);
            $vehicle = json_decode($request->vehicle);
            if ($request->area) {
                $result->area_relation()->attach($area);
            }
            if ($request->zone) {
                $result->zone_relation()->attach($zone);
            }
            if ($request->vehicle) {
                $result->vehicle_relation()->attach($vehicle);
            }
            DB::commit();
            return $this->createResultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    public function update(FunctionUpdateRequest $request, $id)
    {
        try {
            DB::beginTransaction();
            $old_card_tpl_id = 0;
            $data = $request->only($this->model->getFillable());
            $item = $this->query->where('id', $id)->first();
            if ($data['card_template_id'] !== $item->card_template_id) {
                $old_card_tpl_id = $item->card_template_id;
            }
            $item->fill($data);
            $area = json_decode($request->area);
            $zone = json_decode($request->zone);
            $vehicle = json_decode($request->vehicle);
            if ($request->area) {
                $item->area_relation()->sync($area);
            }
            if ($request->zone) {
                $item->zone_relation()->sync($zone);
            }
            if ($request->vehicle) {
                $item->vehicle_relation()->sync($vehicle);
            }
            $result = $item->update();
            FormPdfJob::dispatch($data['card_template_id']);
            if ($old_card_tpl_id != 0) {
                FormPdfJob::dispatch($old_card_tpl_id);
            }
            DB::commit();
            return $this->resultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    private function _filter(Request $request)
    {
        $this->query->with('Organization', 'CardTemplate', 'area_relation', 'zone_relation', 'vehicle_relation');
        //        if ($request->filter) {
        //            $this->query->join('m_organizations', 'm_organizations.id','=', 'm_functions.organization_id')
        //                ->select(DB::raw('concat("[",m_organizations.abbreviation,"]"," ",m_functions.name) as name,
        //                concat("[",m_organizations.abbreviation,"]"," ",m_functions.english_name) as english_name, m_functions.id as id'));
        //            if ($request->name) {
        //                $this->query->where(DB::raw('concat("[",m_organizations.abbreviation,"]"," ",m_functions.name)'),"like",
        //                    "%".$request->name."%");
        //            }
        //            if ($request->english_name) {
        //                $this->query->where(DB::raw('concat("[",m_organizations.abbreviation,"]"," ",m_functions.english_name)'),"like",
        //                    "%".$request->english_name."%");
        //            }
        //        }
        if ($request->filter) {
            $this->query->join('m_card_templates', 'm_card_templates.id', '=', 'm_functions.card_template_id')
                ->select(DB::raw('concat("[",m_card_templates.name,"]"," ",m_functions.name) as name,
                concat("[",m_card_templates.name,"]"," ",m_functions.english_name) as english_name, m_functions.id as id, m_functions.card_template_id'));
            if ($request->name) {
                $this->query->where(
                    DB::raw('concat("[",m_card_templates.name,"]"," ",m_functions.name)'),
                    "like",
                    "%" . $request->name . "%"
                );
            }
            if ($request->english_name) {
                $this->query->where(
                    DB::raw('concat("[",m_card_templates.name,"]"," ",m_functions.english_name)'),
                    "like",
                    "%" . $request->english_name . "%"
                );
            }
        }
    }
    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            $fields[] = $column['field'];
            $header[] = $column['title'];
        }
        $data = [];
        $function = $this->query->whereIn('id', $id)->with(['Organization', 'CardTemplate', 'area_relation', 'zone_relation', 'vehicle_relation'])->get();
        foreach ($function as $key => $value) {
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
                if ($field == 'organization') {
                    if (App::getLocale() == "vi") {
                        $data[$key]['organization'] = isset($value['Organization']) ?  $value['Organization']['name'] : '';
                    }
                    if (App::getLocale() == "en") {
                        $data[$key]['organization'] = isset($value['Organization']) ?  $value['Organization']['english_name'] : '';
                    }
                }
            }
        }
        return Excel::download(new DataExport($id, $header, $data), 'funciton.xlsx');
    }

    public function renderPdf($id)
    {
        $cardTemplate = DB::table('m_card_templates')->where('id', $id)->first();
        $function = DB::table('m_functions')
            ->join('m_organizations', 'm_organizations.id', '=', 'm_functions.organization_id')
            ->where('card_template_id', $cardTemplate->id)
            ->select('m_organizations.abbreviation', 'm_functions.english_name')
            ->get();
        $organization = '';
        $template = '';
        foreach ($function as $key => $mo) {
            $template = '<p class="function">
                    <span class="block" ></span>
                    <span>' . $mo->abbreviation . ' - ' . $mo->english_name . ' </span>
                </p>';
            $organization = $organization . $template;
            $test = $template . $template;
        }
        $img = DB::table('display_setting')->first();
        $data = [
            'card_name' => $cardTemplate->text,
            'back_color_card' => $cardTemplate->background_color,
            'text_color' => $cardTemplate->text_color,
            'organization' => $organization,
            'img' => $img
        ];
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.register_offline', $data);
        $content = $formpdf->download()->getOriginalContent();

        Storage::put('public/TemplatePDF/' . $cardTemplate->name . '.pdf', $content);
    }
    public function syncData(Request $request)
    {
        $syncData = new SyncDataSeagameGms();

        $method = "GET";
        $endpoint = "function";
        $params = ["per_page" => 1000];
        $data =   $syncData->syncdata($method, $endpoint, $params);
        $function = $data->data;
        // return $function;
        Functions::query()->forceDelete();
        DB::beginTransaction();
        try {
            foreach ($function as $dt) {
                // return response()->json($dt);
                Functions::insert([
                    'id' => $dt->id,
                    'name' => $dt->name,
                    'english_name' => $dt->english_name,
                    'code' => $dt->code,
                    'organization_id' => $dt->organization_id,
                    'sub_code' => $dt->sub_code,
                    'card_template_id' => $dt->card_template_id,
                    'is_staff' => $dt->is_staff,
                    'is_volunteer' => $dt->is_volunteer,
                ]);
            }
            DB::commit();
            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);
        } catch (\Exception $e) {
            throw  $e;
            $this->errorResponseSystem();
        }
    }
    public function destroy(Request $request, $id)
    {
        //        if($request->status =="check")
        //        {
        //            $member = DB::table('personal_infos')->where('function_id', $id)->select(DB::raw('count(personal_infos.function_id) as member'))->get();
        //            $staff = DB::table('staffs')->where('function_id', $id)->select(DB::raw('count(staffs.function_id) as staff'))->get();
        //            $volunteer = DB::table('volunteers')->where('function_id', $id)->select(DB::raw('count(volunteers.function_id) as volunteer'))->get();
        //            $total = [
        //                'member' => $member,
        //                'staff' => $staff,
        //                'volunteer' => $volunteer
        //            ];
        //            return $total;
        //        }
        //        if($request->status == "delete")
        //        {
        //            $function = Functions::query()->where('id',$id)->first();
        //            $staffs = DB::table('staffs')->where('function_id', $id)->get();
        //            $volunteers = DB::table('volunteers')->where('function_id', $id)->get();
        //            $areas = DB::table('function_access_area_relations')->where('function_id', $id)->delete();
        //            $zones = DB::table('function_access_zone_relations')->where('function_id', $id)->delete();
        //            $vehicles = DB::table('function_access_vehicle_relations')->where('function_id', $id)->delete();
        //            foreach ($staffs as $staff) {
        //                $delete = StaffGroupMember::where('staff_id', $staff->id)->forceDelete();
        //            }
        //            foreach ($volunteers as $volunteer) {
        //                $delete_group = VolunteerGroupMember::where('volunteer_id', $volunteer->id)->forceDelete();
        //                $delete_class = VolunteerTrainingHistory::where('volunteer_no', $volunteer->id)->forceDelete();
        //            }
        //            $member = DB::table('personal_infos')->where('function_id', $id)->delete();
        //            $staffs = DB::table('staffs')->where('function_id', $id)->delete();
        //            $volunteers = DB::table('volunteers')->where('function_id', $id)->delete();
        //            $function = DB::table('m_functions')->where('id', $id)->delete();
        //            return $this->deleteResultResponse($function);
        //        }
    }
}
