<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\ApiResourceController;
use App\Http\Controllers\Controller;
use App\Models\SportDiscipline;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\SportDisciplineStoreRequest;
use App\Http\Requests\SportDisciplineUpdateRequest;
use App\Models\EntryByName;
use App\Models\EntryByNumber;
use App\Models\Files;
use App\Models\SportDisciplineEvent;

class SportDisciplineController extends ApiResourceController
{
    //
    protected function setModel()
    {
        $this->model = new SportDiscipline();
        // TODO: Implement setModel() method.
    }

    public function store(Request $request)
    {
        $data = $request->only($this->model->getFillable());

        if ($request->hasFile('files')) {
            $file = $request->file('files');
            $img = Storage::disk('public')->put('sport_discipline', $file);
            $data['icon'] = $img;
        }
        $result = $this->query->create($data);
        return $this->createResultResponse($result);
    }

    public function update(Request $request, $id)
    {
        $data = $request->only($this->model->getFillable());
        $item = $this->query->where('id', $id)->first();
        if (!$item) {
            return response()->json(['error' => 'Not found'], 404);
        }
        if ($request->hasFile('files')) {
            $exits = Storage::disk('public')->exists($item->icon);
            if ($exits) {
                $delete = Storage::disk('public')->delete($item->icon);
            }
            $file = $request->file('files');
            $img = Storage::disk('public')->put('sport_discipline', $file);
            $data['icon'] = $img;
        }
        $item->fill($data);

        $result = $item->update();

        return $this->resultResponse($result);
    }

    public function addFilter($request)
    {
        $this->query->with(['sport']);
        $request = $this->request;
        $team_id = $request->team_id;
        $this->query->with('files');
        if ($request->team_id) {
            $this->query->with(['sportDiscipline.sport', 'members.organization', 'members.function', 'members.entryByName', 'files' =>
            function ($query)
            use ($team_id) {
                $query->where('personal_infos.team_id', $team_id);
            }, 'entryByName' => function ($query)
            use ($team_id) {
                $query->where('team_id', $team_id);
            }]);
        }
        if($request->sport_name) {
            $name = $request->sport_name;
            $this->query->whereHas('sport', function ($query) use ($name) {
                $query->where('name', 'like', '%'.$name.'%');
            });
        }
    }

    public function destroy(Request $request, $id)
    {
        $sport_discipline_event = SportDisciplineEvent::query()->where('sport_discipline_id', $id)->get();
        $sport_discipline_event_id = [];
        foreach ($sport_discipline_event as $key => $events) {
            $sport_discipline_event_id[$key]  =  $events['id'];
        }
        // $entry_by_name = EntryByName::query()->whereIn('sport_discipline_event_id', $sport_discipline_event_id)->forceDelete();
        // $entry_by_number = EntryByNumber::query()->whereIn('sport_discipline_event_id', $sport_discipline_event_id)->forceDelete();
        $file_entry_by_number = Files::query()->where('ref_id', $id)->first();
        if ($file_entry_by_number) {
            $file_entry_by_number->forceDelete();
        }
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }
}
