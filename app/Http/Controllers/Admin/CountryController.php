<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Models\Country;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\CountryCreateRequest;
use App\Http\Requests\CountryUpdateRequest;
use Maatwebsite\Excel\Facades\Excel;
use App\Helpers\SyncDataSeagameGms;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\DB;

class CountryController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new Country();
    }

    public function index(Request $request)
    {
        $this->_filter($request);
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(CountryCreateRequest $request)
    {
        $data = $request->only($this->model->getFillable());

        if ($request->hasFile('files')) {
            $file = $request->file('files');
            $img = Storage::disk('public')->put('flags', $file);
            $data['flag_url'] = $img;
        }
        $result = $this->query->create($data);
        return $this->createResultResponse($result);
    }

    public function update(CountryUpdateRequest $request, $id)
    {
        $data = $request->only($this->model->getFillable());
        $item = $this->query->where('id', $id)->first();
        if (!$item) {
            return response()->json(['error' => 'Not found'], 404);
        }
        if ($request->hasFile('files')) {
            if ($item->flag_url) {
                $delete = Storage::disk('public')->delete($item->flag_url);
            }
            $file = $request->file('files');
            $img = Storage::disk('public')->put('flags', $file);
            $data['flag_url'] = $img;
        }
        $item->fill($data);

        $result = $item->update();

        return $this->resultResponse($result);
    }

    public function deleteList(Request $request)
    {
        if ($request->action == 'force') {
            $id = json_decode($request->ids);
            $delete = Country::whereIn('id', $id)->forceDelete();
            return $this->deleteResultResponse($delete);
        } else {
            $id = json_decode($request->ids);
            $delete = Country::whereIn('id', $id)->delete();
            return $this->deleteResultResponse($delete);
        }
    }
    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            if ($column['field'] == 'flag') {
            } else {
                $fields[] = $column['field'];
                $header[] = $column['title'];
            }
        }
        $data = [];
        $country = $this->query->whereIn('id', $id)->get();
        foreach ($country as $key => $value) {
            // $data[$key]['No']=$key+1;
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
            }
        }
        return Excel::download(new DataExport($id, $header, $data), 'country.xlsx');
    }

    public function destroy(Request $request, $id)
    {
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }

    private function _filter(Request $request)
    {
    }
    public function syncData()
    {
        $request = request();
        $syncData = new SyncDataSeagameGms();
        $method = "GET";
        $api_url = $request->api_url;
        $params = ["per_page" => 10000];
        $data =   $syncData->syncdata($method, $api_url, $params);
        $country = $data->data;
        // return $country;
        Country::query()->forceDelete();
        DB::beginTransaction();
        try {
            foreach ($country as $dt) {
                // return response()->json($dt);
                Country::insert([
                    'id' => $dt->id,
                    'country_code_3_digits' => $dt->country_code_3_digits,
                    'name' => $dt->name,
                    'flag_url' => $dt->flag_url,

                ]);
            }
            DB::commit();
            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);
        } catch (\Exception $e) {
            throw  $e;
            $this->errorResponseSystem();
        }
    }
}
