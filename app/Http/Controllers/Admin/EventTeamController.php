<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Models\EventTeamCompetitor;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Http\Requests\EventTeamStoreRequest;
use App\Http\Requests\EventTeamUpdateRequest;
use App\Models\EventTeam;
use App\Models\SportDisciplineEvent;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Lang;
use Maatwebsite\Excel\Facades\Excel;


class EventTeamController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new EventTeam();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(Request $request)
    {

        DB::beginTransaction();
        try {
            $event = SportDisciplineEvent::query()->where("id", $request->event_id)->first();
            $max_team_competitor = $event->max_competitor_count;
            // return $event;
            $eventTeam = EventTeam::query()->where("team_id", $request->team_id)->where("event_id", $request->event_id)->get();
            // return count($eventTeam);
            if (count($eventTeam) >=  $max_team_competitor) {
                return response()->json(['message' => Lang::get('response.response_message.max_team_competitor')], 422);
            }
            // $data = $request->only($this->model->getFillable());
            $result = EventTeam::updateOrCreate([
                'name' => $request->name,
                'team_id' => $request->team_id,
                'event_id' => $request->event_id,
            ]);
            if ($request->team) {
                $members = json_decode($request->team, true);
                foreach ($members as $mb) {
                    EventTeamCompetitor::updateOrCreate([
                        "competitor_id" => $mb,
                        "event_team_id" => $result->id
                    ]);
                }
                // $result->event_team_competitor()->attach($members);
            }
            DB::commit();
            return $this->createResultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem();
        }
    }

    public function update(EventTeamUpdateRequest $request, $id)
    {
        DB::beginTransaction();
        try {
            $members = json_decode($request->team, true);
            if (empty($members)) {
                $result =  EventTeam::query()->where('id', $id)->delete();
            } else {
                $data = $request->only($this->model->getFillable());
                $item = $this->query->where('id', $id)->first();
                $item->fill($data);
                $item->event_team_competitor()->sync($members);
                $result = $item->update();
            }
            DB::commit();
            return $this->resultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem();
        }
    }

    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            if ($column['field'] == 'flag') {
            } else {
                $fields[] = $column['field'];
                $header[] = $column['title'];
            }
        }
        $data = [];
        $country = $this->query->with('team', 'Event.sportDiscipline.sport', 'event_team_competitor')->whereIn('id', $id)->get();
        foreach ($country as $key => $value) {
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
                if ($field == "team") {
                    if (App::getLocale() == "vi") {
                        $data[$key]['team'] = $value['team']['name'];
                    } else {
                        $data[$key]['team'] = $value['team']['english_name'];
                    }
                }
                if ($field == "name") {
                    $data[$key]['name'] = $value['name'];
                }
                if ($field == "event") {
                    if (App::getLocale() == "vi") {
                        $data[$key]['event'] = $value['Event']['sportDiscipline']['sport']['name'] . "/" . $value['Event']['sportDiscipline']['name'] . "/" . $value['Event']['name'];
                    } else {
                        $data[$key]['event'] = $value['Event']['sportDiscipline']['sport']['english_name'] . "/" . $value['Event']['sportDiscipline']['english_name'] . "/" . $value['Event']['english_name'];
                    }
                }
                if ($field == "total_registered") {
                    $data[$key]['total_registered'] = count($value['event_team_competitor']);
                }
            }
        }
        return Excel::download(new DataExport($id, $header, $data), 'List Athletes.xlsx');
    }

    public function destroy(Request $request, $id)
    {
        $data = EventTeamCompetitor::query()->where('event_team_id', $id)->forceDelete();
        $eventTeam = EventTeam::query()->where('id', $id)->delete();
        return $this->deleteResultResponse($eventTeam);
    }

    public function addFilter($request)
    {
        $this->query->with([
            'Team',
            'EventTeamCompetitor',
            'EventTeamCompetitor.Competitor',
            'Event',
            'Event.sportDiscipline',
            'Event.sportDiscipline.sport',
            'event_team_competitor'
        ]);
        if ($request->sport_id) {
        }
        if ($request->sport_discipline_id) {
            $sport_discipline = $request->sport_discipline_id;
            $this->query->with('Event')->whereHas('Event', function ($q) use ($sport_discipline) {
                $q->where('sport_discipline_id', $sport_discipline);
            })->get();
        }
    }

    public function addAppend()
    {
        $this->query->with([
            'Team',
            'EventTeamCompetitor',
            'EventTeamCompetitor.Competitor',
            'Event',
            'Event.sportDiscipline',
            'Event.sportDiscipline.sport',
            'event_team_competitor'
        ]);
    }

    public function bulkDelete(Request $request)
    {
        $ids = json_decode($request->ids);
        $list_athletes_team = '';
        foreach ($ids as $id) {
            $list_athletes_team = EventTeam::query()->where('id', $id)->first();
            $list_athletes_team->forceDelete();
        }
        return $this->deleteResultResponse($list_athletes_team);
    }
}
