<?php

namespace App\Http\Controllers\Admin;

use App\CompetitorIndividualEventRelations;
use App\Http\Controllers\ApiResourceController;
use App\Http\Controllers\Controller;
use App\Models\Referee;
use App\Models\Sport;
use App\Models\SportDiscipline;
use Barryvdh\DomPDF\Facade as PDF;
use Dompdf\Options;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\SportStoreRequest;
use App\Http\Requests\SportUpdateRequest;
use App\Models\EventTeam;
use Carbon\Carbon;
use App\Models\Team;
use App\Models\Files;
use App\Models\MedalTable;
use App\Models\Participant;
use App\Models\SportDisciplineEvent;
use App\Models\StageQualificationCompetitor;
use Illuminate\Support\Facades\Lang;
use GuzzleHttp\Client;
use GuzzleHttp\Promise;
use PhpOffice\PhpWord\PhpWord;
use Illuminate\Support\Facades\View;
use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\Writer\HTML;

class SportController extends ApiResourceController
{
    //
    protected function setModel()
    {
        $this->model = new Sport();
    }

    public function getSport(Request $request)
    {
        parent::index($request);
        return $this->query->get();
    }

    public function store(Request $request)
    {
        $data = $request->only($this->model->getFillable());

        if ($request->hasFile('files')) {
            $file = $request->file('files');

            $img = Storage::disk('public')->put('sport', $file);
            $data['icon'] = $img;
        }
        $result = $this->query->create($data);

        return $this->createResultResponse($result);
    }

    public function update(Request $request, $id)
    {
        $data = $request->only($this->model->getFillable());
        $item = $this->query->where('id', $id)->first();
        if (!$item) {
            return response()->json(['error' => 'Not found'], 404);
        }

        if ($request->hasFile('files')) {
            $exits = Storage::disk('public')->exists($item->icon);
            if ($exits) {
                $delete = Storage::disk('public')->delete($item->icon);
            }
            $file = $request->file('files');
            $img = Storage::disk('public')->put('sport', $file);
            $data['icon'] = $img;
        }
        $item->fill($data);

        $result = $item->update();

        return $this->resultResponse($result);
    }

    public function destroy(Request $request, $id)
    {
        try {
            $sportDisciplines = SportDiscipline::query()->where('sport_id', $id)->get();

            foreach ($sportDisciplines as $key => $sd) {
                $sport_discipline_id[$key] = $sd['id'];
                $sport_discipline = SportDisciplineEvent::query()->where('sport_discipline_id', $sport_discipline_id)->get();
                $id_ebn = [];
                foreach ($sport_discipline as $index => $sport_dis) {
                    $id_ebn[$index] = $sport_dis['id'];
                }
                // $entry_by_name = EntryByName::query()->whereIn('sport_discipline_event_id', $id_ebn)->forceDelete();
                // $entry_by_number = EntryByNumber::query()->whereIn('sport_discipline_event_id', $id_ebn)->forceDelete();
                $file_entry_by_number = Files::query()->whereIn('ref_id', $sport_discipline_id)->forceDelete();
                $sd->forceDelete();
            }
            return parent::destroy($request, $id); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            return $this->errorResponseSystem();
        }
    }

    public function addFilter($request)
    {
        $this->query->with([
            'sportDisciplines.sportDisciplineEvents.event_rounds',
            'sportDisciplines.sportDisciplineEvents.event_set',
            'sportDisciplines.sportDisciplineEvents.event_statistic',
            'sportDisciplines.sportDisciplineEvents.event_distinguish_player_method'
        ]);

        if ($request->by_name) {
            $this->query->with(['sportDisciplines.sportDisciplineEvents.entryByName' => function ($query) {
                $query->groupBy('team.id');
            }]);
        }
        if ($request->by_number) {
            $this->query->with(['sportDisciplines.sportDisciplineEvents.entryByNumber']);
        }
    }

    public static function EntryByNumber(Request $request)
    {
        $discipline_data = SportDiscipline::query()->where('id', $request->discipline_id)->first();
        $event_data = json_decode($request->event, true);
        $event_table = '';
        $total_male = 0;
        $total_female = 0;
        $index = 1;
        foreach ($event_data as $key => $data) {
            $number_people = DB::table('sport_discipline_event_entry_by_number')->where('sport_discipline_event_id', $data['id'])->first();
            $total_male = $total_male + $number_people->male;
            $total_female = $total_female + $number_people->female;
            $temp = '
            <tr class="table-border">
                <td style="width: 5%" class="table-border textCenter"><p class="fontText">' . $index . '</p></td>
                <td style="width: 55%" class="table-border textCenter"><p class="fontText">' . $data['name'] . '</p></td>
                <td style="width: 20%" class="table-border textCenter"><p class="fontText">' . $data['maximum_male'] . '</p></td>
                <td style="width: 20%" class="table-border textCenter"><p class="fontText">' . $data['maximum_female'] . '</p></td>
                <td style="width: 20%" class="table-border textCenter"><p class="fontText">' . $number_people->male . '</p></td>
                <td style="width: 20%" class="table-border textCenter"><p class="fontText">' . $number_people->female . '</p></td>
            </tr>
            ';
            $event_table = $event_table . $temp;
            $index = $index + 1;
        }
        $header_table = '
        <table style="width: 100%; border-spacing: 0px; border: black solid 1rem">
            <tr class="table-border">
                <td style="width: 5%" rowspan="3" class="table-border textCenter"><p class="fontText">No.</p></td>
                <td style="width: 55%" rowspan="3" class="table-border textCenter"><p class="fontText">Event(s)</p></td>
                <td colspan="4" style="width: 40%" class="table-border textCenter"><p class="fontText">Number of competitors</p></td>
            </tr>
            <tr class="table-border">
                <td class="fontText table-border textCenter" style=" width: 20%" colspan="2"><p>Maximum</p></td>
                <td class="fontText table-border textCenter" style="width: 20%" colspan="2"><p>Entries</p></td>
            </tr>
            <tr class="table-border">
                <td class="fontText table-border textCenter" style="width: 20%"><p>Male</p></td>
                <td class="fontText table-border textCenter" style="width: 20%"><p>Female</p></td>
                <td class="fontText table-border textCenter" style="width: 20%"><p>Male</p></td>
                <td class="fontText table-border textCenter" style="width: 20%"><p>Female</p></td>
            </tr>
        ';
        $bottom_table = '
                    <tr class="table-border">
                <td colspan="4" style="width: 60%" class="table-border textCenter">
                    <p class="fontText">
                        Total
                    </p>
                </td>
                <td class="table-border textCenter">
                    <p class="fontText">' . $total_male . '</p>
                </td>
                <td class="table-border textCenter">
                    <p class="fontText">' . $total_female . '</p>
                </td>
            </tr>
        </table>
        ';
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $logo_sport = $discipline_data->icon;
        $data_event_html = $header_table . $event_table . $bottom_table;
        $data_form = [
            'sport_discipline_name' => $discipline_data->english_name,
            'sport_discipline_note' => $discipline_data->note,
            'event_table' => $data_event_html,
            'logo_url' => $logo_url,
            'logo_sport' => $logo_sport,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.entry_form_by_number.EntryByNumber', $data_form);
        $output = $formpdf->output();
        return $output;
    }
    public static function EntryByNameSingle(Request $request)
    {
        $discipline_data = SportDiscipline::query()->where('id', $request->discipline_id)->first();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $logo_sport = $discipline_data->icon;
        $days = str_split(date('d', strtotime($request->dob)));
        $months = str_split(date('m', strtotime($request->dob)));
        $years = str_split(date('Y', strtotime($request->dob)));
        $heights = str_split($request->height);
        $weights = str_split($request->weight);
        $ad_numbers = str_split($request->ad_no);
        $NOCs = str_split($request->NOC);
        $male = "";
        $female = "";
        if ($request->sex == "Nam") {
            $male = '<span class="block-after"><img src="assets/images/tick.png" width="30px" height="50px" /> </span>';
            $female = '<span class="block-after"></span>';
        } else {
            $male = '<span class="block-after"></span>';
            $female = '<span class="block-after"><img src="assets/images/tick.png" width="30px" height="50px" /> </span>';
        }
        $dataHeight = "";
        $dataWeight = "";
        $dayData = "";
        $ad_no = "";
        $NOC_code = "";
        foreach ($days as $day) {
            $temp = '<span class="block-after">' . $day . '</span>';
            $dayData = $dayData . $temp;
        }
        $dayData = $dayData . '<span class="block-after-blank" />';
        foreach ($months as $month) {
            $temp = '<span class="block-after">' . $month . '</span>';
            $dayData = $dayData . $temp;
        }
        $dayData = $dayData . '<span class="block-after-blank" />';
        foreach ($years as $year) {
            $temp = '<span class="block-after">' . $year . '</span>';
            $dayData = $dayData . $temp;
        }
        foreach ($heights as $height) {
            $temp = '<span class="block-after">' . $height . '</span>';
            $dataHeight = $dataHeight . $temp;
        }
        foreach ($weights as $weight) {
            $temp = '<span class="block-after">' . $weight . '</span>';
            $dataWeight = $dataWeight . $temp;
        }
        foreach ($ad_numbers as $ad_number) {
            $temp = '<span class="block-after">' . $ad_number . '</span>';
            $ad_no = $ad_no . $temp;
        }
        foreach ($NOCs as $NOC) {
            $temp = '<span class="block-after fontText textCenter">' . $NOC . '</span>';
            $NOC_code = $NOC_code . $temp;
        }
        $data_form = [
            'sport_discipline_name' => $discipline_data->english_name,
            'family_name' => $request->family_name,
            'given_name' => $request->given_name,
            'dob' => $dayData,
            'nationality' => $request->nationality,
            'passport_no' => $request->passport_no,
            'male' => $male,
            'female' => $female,
            'ad_no' => $ad_no,
            'height' => $dataHeight,
            'weight' => $dataWeight,
            'logo_url' => $logo_url,
            'logo_sport' => $logo_sport,
            'team_name' => $request->team_name,
            'NOC' => $NOC_code,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.entry_form_by_name.EntryByName', $data_form);
        $output = $formpdf->output();
        return $output;
    }
    public static function EntryByNameTeam(Request $request)
    {
        $discipline_data = SportDiscipline::query()->where('id', $request->discipline_id)->first();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $logo_sport = $discipline_data->icon;
        $member = json_decode($request->member, true);
        $competition_type = (int)$request->competition_type;
        $NOCs = str_split($request->NOC);
        $NOC_code = "";
        foreach ($NOCs as $NOC) {
            $temp = '<span class="block-first fontText textCenter">' . $NOC . '</span>';
            $NOC_code = $NOC_code . $temp;
        }
        $count = count($member);
        $data_form = [
            'logo_url' => $logo_url,
            'logo_sport' => $logo_sport,
            'member' => $member,
            'length' => $count,
            'discipline_name' => $discipline_data->english_name,
            'team_name' => $request->team_name,
            'update' => $request->edit,
            'competition_type' => $competition_type,
            'NOC' => $NOC_code,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        if ($request->has_goalkeeper == 1) {
            $formpdf = $pdf::loadView('pdf_form.entry_form_by_name.EntryByNameTeam', $data_form);
        } else {
            $formpdf = $pdf::loadView('pdf_form.entry_form_by_name.EntryByNameSoccerTeam', $data_form);
        }
        $output = $formpdf->output();
        return $output;
    }
    public static function BeachWaterPolo(Request $request)
    {
        $discipline_data = SportDiscipline::query()->where('id', 2)->first();
        $member_data = EntryByName::query()->where('team_id', 1)->with('member', 'team')->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $logo_sport = $discipline_data->icon;

        $data_form = [];
        foreach ($member_data as $key => $data) {
            $temp = [

                'ad_no' => $data->member['accreditation_number'],
                'family_name' => $data->member['family_name'],
                'given_name' => $data->member['given_name'],
                'sex' => $data->member['sex'],
                'team' => $data->team['english_name'],

            ];
            array_push($data_form, $temp);
        }
        $count = count($data_form);
        $data = [
            'data_form' => $data_form, 'length' => $count, 'logo_url' => $logo_url, 'logo_sport' => $logo_sport,
            'sport_discipline_name' => $discipline_data->english_name,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.family_list.BeachWaterPolo', $data);
        $output = $formpdf->output();
        return $output;
    }
    public static function downloadFormPDF(Request $request)
    {
        $discipline_data = SportDiscipline::query()->where('id', 3)->first();
        $member_data = EntryByName::query()->where('team_id', 1)->with('member', 'team')->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $logo_sport = $discipline_data->icon;
        $data_form = [];
        foreach ($member_data as $key => $data) {
            $temp = [

                'ad_no' => $data->member['accreditation_number'],
                'family_name' => $data->member['family_name'],
                'given_name' => $data->member['given_name'],
                'sex' => $data->member['sex'],
                'team' => $data->team['english_name'],
            ];
            array_push($data_form, $temp);
        }
        $count = count($data_form);
        $data = [
            'data_form' => $data_form, 'length' => $count, 'logo_url' => $logo_url, 'logo_sport' => $logo_sport,
            'sport_discipline_name' => $discipline_data->english_name,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.family_list.FamilyList', $data);
        $output = $formpdf->output();
        return $output;
    }
    public static function downloadAccommodation1(Request $request)
    {
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $data = [
            'logo_url' => $logo_url,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.accommodation.Accommodation1', $data);
        $output = $formpdf->output();
        return $output;
    }
    public static function downloadAccommodation2(Request $request)
    {
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $data = [
            'logo_url' => $logo_url,
        ];
        $pdf = new PDF();
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.accommodation.Accommodation2', $data);
        $output = $formpdf->output();
        return $output;
    }

    public function dataSync(Request $request)
    {
        try {
            $sport_data  = $this->dataSyncSport($request);

            $discipline = $this->dataSyncDisCipline($request);

            $event = $this->dataSyncEvent($request);

            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);;
        } catch (\Exception $e) {
            throw $e;
            $this->errorResponseSystem();
        }
    }

    public function syncPng(Request $request)
    {
        $client = new Client(['base_uri' => 'http://dev1.solashi.com:2288']);

        $promises = [
            'image' => $client->getAsync('/storage/personal_info/profile/7V4FC4BYEIwgL9GXLOPjYN8l340ypzvjxB7tfGkF.jpeg'),
        ];
        $results = Promise\settle($promises)->wait();
        $path = 'personal_info/profile/7V4FC4BYEIwgL9GXLOPjYN8l340ypzvjxB7tfGkF.jpeg';
        Storage::disk('public')->put($path, $results['image']['value']->getBody());
        return $results['image']['value'];
    }
    public function export_report_pdf(Request $request)
    {
        $sport_discipline = [];
        $sport_discipline_event = [];
        $participant = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 1)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }
        $participant_lists = Participant::query()->with(['sportDisciplineEvents', 'team', 'function'])->whereHas('sportDisciplineEvents', function ($query) use ($sport_discipline_event) {
            return $query->whereIn('event_id', $sport_discipline_event);
        })->get();
        foreach ($participant_lists as $participant_list) {
            array_push($participant, $participant_list['id']);
        }
        $NOC_entry_list = Team::query()->with('participant_list.sportDisciplineEvents')->whereHas('participant_list', function ($query) use ($participant) {
            return $query->whereIn('id', $participant);
        })->get();
        foreach ($NOC_entry_list as $competitor) {
            $count = count($competitor['participant_list']);
            $competitor['count'] = $count + 1;
        }
        $referee = Referee::query()->with('sportDisciplineEvents', 'nationality')->whereHas('sportDisciplineEvents', function ($query) use ($sport_discipline_event) {
            return $query->whereIn('event_id', $sport_discipline_event);
        })->get();
        $event_list = SportDisciplineEvent::query()->with('participant.team.Country', 'eventTeam.Team.Country')->whereIn('id', $sport_discipline_event)->has('participant')->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $image = Sport::query()->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $data = [
            'logo_url' => $logo_url,
            'image_url' => $image['icon'],
            'name_sport' => $image['english_name'],
            'NOC' => $NOC_entry_list,
            'participant_list' => $participant_lists,
            'referee' => $referee,
            'event_list' => $event_list
        ];
        $doc = new PhpWord();
        $section = $doc->addSection();

        $referee_and_judges = \view('word_form.referee_and_judges', $data)->render();
        $entry_list_category = \view('word_form.entry_list_by_weight', $data)->render();
        $entry_list_NOC = \view('word_form.entry_list_by_NOC', $data)->render();
        $entry_data_checklist = \view('word_form.entry_data_checklist', $data)->render();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $entry_list_NOC);
        $section->addPageBreak();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $entry_list_category);
        $section->addPageBreak();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $referee_and_judges);
        $section->addPageBreak();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $entry_data_checklist);
        foreach ($event_list as $event) {
            $data_setup = [
                'logo_url' => $logo_url,
                'image_url' => $image['icon'],
                'event' => $event
            ];
            $competition_officials = \view('word_form.competition_officials', $data_setup)->render();
            $section->addPageBreak();
            \PhpOffice\PhpWord\Shared\Html::addHtml($section, $competition_officials);
        }
        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('Test.docx');

        return response()->download(public_path('Test.docx'));
    }

    public function export_report(Request $request)
    {

        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 1)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }

        $events = SportDisciplineEvent::query()->with('stages.stage_qualification_competitors.competitor', 'sportDiscipline.sport', 'stages.stage_qualification_competitors.team')
            ->whereIn('id', $sport_discipline_event)->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $image = Sport::query()->where('id', 1)->first();
        $doc = new PhpWord();
        $section = $doc->addSection();

        foreach ($events as $event) {
            $data = [
                'logo_url' => $logo_url,
                'image_url' => $image['icon'],
                'sport' => $image,
                'event' => $event,
            ];
            $medal_lists = \view('word_form.medal_lists', $data)->render();
            \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
            $section->addPageBreak();
        }

        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('Medallists.docx');

        return response()->download(public_path('Medallists.docx'));
    }
    public function medal_list_by_weight_category(Request $request)
    {
        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 1)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }

        $events = SportDisciplineEvent::query()->with('stages.stage_qualification_competitors.competitor', 'sportDiscipline.sport', 'stages.stage_qualification_competitors.team')
            ->whereIn('id', $sport_discipline_event)->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $sport = Sport::query()->where('id', 1)->first();
        $date = Carbon::now()->format('d/m/Y');
        $doc = new PhpWord();
        $section = $doc->addSection();
        $data = [
            'logo_url' => $logo_url,
            'sport' => $sport,
            'events' => $events,
            'date' => $date,
        ];
        // return $data;
        $medal_lists = \view('word_form.medal_list_by_weight_category', $data)->render();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
        $section->addPageBreak();

        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('MedallistByWeight.docx');

        return response()->download(public_path('MedallistByWeight.docx'));
    }
    public function medal_standing(Request $request)
    {
        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 1)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $sport = Sport::query()->where('id', 1)->first();
        $teams = Team::query()->with(
            'event_team.stage_qualification_competitors',
            'medal',
            'event_team.Event',
            'participant_list.stage_qualification_competitors.stage.event'

        )
            ->get();
        $event_mens = SportDisciplineEvent::query()->where('type', 1)->with('stages.stage_qualification_competitors')->get();
        $event_womens = SportDisciplineEvent::query()->where('type', 2)->with('stages.stage_qualification_competitors')->get();
        $event_mix = SportDisciplineEvent::query()->where('type', 3)->with('stages.stage_qualification_competitors')->get();
        $G_MEN = [];
        $S_MEN = [];
        $B_MEN = [];
        $G_WOMEN = [];
        $S_WOMEN = [];
        $B_WOMEN = [];
        $G_MIX = [];
        $S_MIX = [];
        $B_MIX = [];
        foreach ($event_mens as $event_men) {
            foreach ($event_men['stages'] as $stage) {
                foreach ($stage['stage_qualification_competitors'] as $stage_qualification_competitor) {
                    if ($stage_qualification_competitor['qualification_type'] == 2) {
                        array_push($G_MEN, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 3) {
                        array_push($S_MEN, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 4) {
                        array_push($B_MEN, $stage_qualification_competitor);
                    }
                }
            }
        }
        foreach ($event_womens as $event_men) {
            foreach ($event_men['stages'] as $stage) {
                foreach ($stage['stage_qualification_competitors'] as $stage_qualification_competitor) {
                    if ($stage_qualification_competitor['qualification_type'] == 2) {
                        array_push($G_WOMEN, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 3) {
                        array_push($S_WOMEN, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 4) {
                        array_push($B_WOMEN, $stage_qualification_competitor);
                    }
                }
            }
        }
        foreach ($event_mix as $event_men) {
            foreach ($event_men['stages'] as $stage) {
                foreach ($stage['stage_qualification_competitors'] as $stage_qualification_competitor) {
                    if ($stage_qualification_competitor['qualification_type'] == 2) {
                        array_push($G_MIX, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 3) {
                        array_push($S_MIX, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['qualification_type'] == 4) {
                        array_push($B_MIX, $stage_qualification_competitor);
                    }
                }
            }
        }

        foreach ($teams as $team) {
            $gold_mens = [];
            $silver_mens = [];
            $bronze_mens = [];
            $gold_womens = [];
            $silver_womens = [];
            $bronze_womens = [];
            $gold_men_totals = [];
            $silver_men_totals = [];
            $bronze_men_totals = [];
            $gold_women_totals = [];
            $silver_women_totals = [];
            $bronze_women_totals = [];
            $gold_mix_totals = [];
            $silver_mix_totals = [];
            $bronze_mix_totals = [];
            foreach ($team['participant_list'] as $participant_list) {
                foreach ($participant_list['stage_qualification_competitors'] as $stage_qualification_competitor) {
                    if ($stage_qualification_competitor['stage']['event']['type'] == 1 && $stage_qualification_competitor['qualification_type'] == 2) {
                        array_push($gold_mens, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['stage']['event']['type'] == 1 && $stage_qualification_competitor['qualification_type'] == 3) {
                        array_push($silver_mens, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['stage']['event']['type'] == 1 && $stage_qualification_competitor['qualification_type'] == 4) {
                        array_push($bronze_mens, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['stage']['event']['type'] == 2 && $stage_qualification_competitor['qualification_type'] == 2) {
                        array_push($gold_womens, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['stage']['event']['type'] == 2 && $stage_qualification_competitor['qualification_type'] == 3) {
                        array_push($silver_womens, $stage_qualification_competitor);
                    }
                    if ($stage_qualification_competitor['stage']['event']['type'] == 2 && $stage_qualification_competitor['qualification_type'] == 4) {
                        array_push($bronze_womens, $stage_qualification_competitor);
                    }
                }
            }
            foreach ($team['event_team'] as $event_team) {
                if ($event_team['event']['type'] == 1) {
                    foreach ($event_team['stage_qualification_competitors'] as $stage_qualification_competitor) {
                        if ($stage_qualification_competitor['qualification_type'] == 2) {
                            array_push($gold_men_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 3) {
                            array_push($silver_men_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 4) {
                            array_push($bronze_men_totals, $stage_qualification_competitor);
                        }
                    }
                }
                if ($event_team['event']['type'] == 2) {
                    foreach ($event_team['stage_qualification_competitors'] as $stage_qualification_competitor) {
                        if ($stage_qualification_competitor['qualification_type'] == 2) {
                            array_push($gold_women_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 3) {
                            array_push($silver_women_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 4) {
                            array_push($bronze_women_totals, $stage_qualification_competitor);
                        }
                    }
                }
                if ($event_team['event']['type'] == 3) {
                    foreach ($event_team['stage_qualification_competitors'] as $stage_qualification_competitor) {
                        if ($stage_qualification_competitor['qualification_type'] == 2) {
                            array_push($gold_mix_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 3) {
                            array_push($silver_mix_totals, $stage_qualification_competitor);
                        }
                        if ($stage_qualification_competitor['qualification_type'] == 4) {
                            array_push($bronze_mix_totals, $stage_qualification_competitor);
                        }
                    }
                }
            }
            $team['gold_mens'] = count($gold_mens);
            $team['silver_mens'] = count($silver_mens);
            $team['bronze_mens'] = count($bronze_mens);
            $team['gold_womens'] = count($gold_womens);
            $team['silver_womens'] = count($silver_womens);
            $team['bronze_womens'] = count($bronze_womens);
            $team['gold_men_totals'] = count($gold_men_totals);
            $team['silver_men_totals'] = count($silver_men_totals);
            $team['bronze_men_totals'] = count($bronze_men_totals);
            $team['gold_women_totals'] = count($gold_women_totals);
            $team['silver_women_totals'] = count($silver_women_totals);
            $team['bronze_women_totals'] = count($bronze_women_totals);
            $team['gold_mix_totals'] = count($gold_mix_totals);
            $team['silver_mix_totals'] = count($silver_mix_totals);
            $team['bronze_mix_totals'] = count($bronze_mix_totals);
        }
        $doc = new PhpWord();
        $section = $doc->addSection();
        $data = [
            'logo_url' => $logo_url,
            'sport' => $sport,
            'teams' => $teams,
            'G_MEN' => count($G_MEN),
            'S_MEN' => count($S_MEN),
            'B_MEN' => count($B_MEN),
            'G_WOMEN' => count($G_WOMEN),
            'S_WOMEN' => count($S_WOMEN),
            'B_WOMEN' => count($B_WOMEN),
            'G_MIX' => count($G_MIX),
            'S_MIX' => count($S_MIX),
            'B_MIX' => count($B_MIX),

        ];
        // return $data;
        $medal_lists = \view('word_form.medal_standing', $data)->render();
        \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
        $section->addPageBreak();

        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('MedalStanding.docx');

        return response()->download(public_path('MedalStanding.docx'));
    }
    public function daily_schedule(Request $request)
    {
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $sport = Sport::query()->where('id', 4)->first();
        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 4)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }

        $events = SportDisciplineEvent::query()->with(
            'event_distinguish_player_method',
            'teams.uniform_color',
            'participant',
            'stages.matches.match_individual_competitors.competitor',
            'stages.matches.competitors',
            'stages.matches.match_event_team.member.uniforms',
            'stages.matches.match_event_team.event_team'
        )
            ->whereIn('id', $sport_discipline_event)->get();

        $doc = new PhpWord();
        $section = $doc->addSection();
        $match_individual_lists = [];
        $match_team_lists = [];
        foreach ($events as $event) {
            foreach ($event->stages as $stage) {
                foreach ($stage->matches as $matches) {
                    $matches['name_stage'] = $stage->english_name;
                    if (count($event->teams) > 0 && count($event->participant) == 0) {
                        foreach ($matches->match_event_team as $match_event_team) {
                            $match_event_team['event_team']['uniform'] = $match_event_team->member[0]['uniforms'];
                        }
                        array_push($match_team_lists, $matches);
                        $event['match_team_lists'] = $match_team_lists;
                    }
                    if (count($event->participant) > 0 && count($event->teams) == 0) {
                        array_push($match_individual_lists, $matches);
                        $event['match_individual_lists'] = $match_individual_lists;
                    }
                }
            }
            $data = [
                'logo_url' => $logo_url,
                'sport' => $sport,
                'event' => $event,
            ];

            if (count($event->stages) > 0 && count($event->participant) > 0 || count($event->stages) > 0 && count($event->teams) > 0) {
                $medal_lists = \view('word_form.daily_schedule', $data)->render();
                \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
                $section->addPageBreak();
            }
        }

        // return $events;
        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('DailySchedule.docx');

        return response()->download(public_path('DailySchedule.docx'));
    }
    public function daily_schedule_with_referee(Request $request)
    {
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $sport = Sport::query()->where('id', 4)->first();
        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 4)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }

        $events = SportDisciplineEvent::query()->with(
            'event_distinguish_player_method',
            'teams.uniform_color',
            'participant',
            'stages.matches.match_individual_competitors.competitor',
            'stages.matches.competitors',
            'stages.matches.match_event_team.member.uniforms',
            'stages.matches.match_event_team.event_team',
            'stages.matches.match_referee_relations'
        )
            ->whereIn('id', $sport_discipline_event)->get();

        $doc = new PhpWord();
        $section = $doc->addSection();
        $match_individual_lists = [];
        $match_team_lists = [];
        foreach ($events as $event) {
            foreach ($event->stages as $stage) {
                foreach ($stage->matches as $matches) {
                    $matches['name_stage'] = $stage->english_name;
                    if (count($event->teams) > 0 && count($event->participant) == 0) {
                        foreach ($matches->match_event_team as $match_event_team) {
                            $match_event_team['event_team']['uniform'] = $match_event_team->member[0]['uniforms'];
                        }
                        array_push($match_team_lists, $matches);
                        $event['match_team_lists'] = $match_team_lists;
                    }
                    if (count($event->participant) > 0 && count($event->teams) == 0) {
                        array_push($match_individual_lists, $matches);
                        $event['match_individual_lists'] = $match_individual_lists;
                    }
                }
            }
            $data = [
                'logo_url' => $logo_url,
                'sport' => $sport,
                'event' => $event,
            ];

            if (count($event->stages) > 0 && count($event->participant) > 0 || count($event->stages) > 0 && count($event->teams) > 0) {
                $medal_lists = \view('word_form.daily_schedule_with_referee', $data)->render();
                \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
                $section->addPageBreak();
            }
        }
        // return $events;
        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('DailyScheduleWithReferee.docx');

        return response()->download(public_path('DailyScheduleWithReferee.docx'));
    }
    public function fight_result(Request $request)
    {

        $sport_discipline = [];
        $sport_discipline_event = [];
        $array_discipline = SportDiscipline::query()->where('sport_id', 4)->get();
        foreach ($array_discipline as $discipline) {
            array_push($sport_discipline, $discipline['id']);
        }
        $array_discipline_event = SportDisciplineEvent::query()->whereIn('sport_discipline_id', $sport_discipline)->get();
        foreach ($array_discipline_event as $event) {
            array_push($sport_discipline_event, $event['id']);
        }

        $events = SportDisciplineEvent::query()->with(
            'event_distinguish_player_method',
            'teams.uniform_color',
            'participant',
            'stages.matches.match_individual_competitors.competitor',
            'stages.matches.competitors',
            'stages.matches.match_event_team.member.uniforms',
            'stages.matches.match_event_team.event_team',
            'stages.matches.match_referee_relations.referee.nationality',
            'stages.matches.match_referee_relations.referee_role',
            'stages.matches.stage_qualification_competitor',
            'stages.matches.match_individual_competitors.result.match_round_result_referee_relation',
            'stages.matches.match_event_team.result',
            'stages.matches.round.result.match_round_result_referee_relation.match_round_result'
        )
            ->whereIn('id', $sport_discipline_event)->get();
        $logo = DB::table('display_setting')->where('id', 1)->first();
        $logo_url = $logo->logo_url;
        $sport = Sport::query()->where('id', 4)->first();
        $doc = new PhpWord();
        $section = $doc->addSection();

        $match_individual_lists = [];
        $match_team_lists = [];
        foreach ($events as $event) {
            foreach ($event->stages as $stage) {
                foreach ($stage->matches as $matches) {
                    $matches['name_stage'] = $stage->english_name;
                    if (count($event->teams) > 0 && count($event->participant) == 0) {
                        foreach ($matches->match_event_team as $match_event_team) {
                            $match_event_team['event_team']['uniform'] = $match_event_team->member[0]['uniforms'];
                        }
                        array_push($match_team_lists, $matches);
                        $event['match_team_lists'] = $match_team_lists;
                    }
                    if (count($event->participant) > 0 && count($event->teams) == 0) {
                        array_push($match_individual_lists, $matches);
                        $event['match_individual_lists'] = $match_individual_lists;
                    }
                }
            }
            $data = [
                'logo_url' => $logo_url,
                'sport' => $sport,
                'event' => $event,
            ];

            if (count($event->stages) > 0 && count($event->participant) > 0 || count($event->stages) > 0 && count($event->teams) > 0) {
                $medal_lists = \view('word_form.fight_results', $data)->render();
                \PhpOffice\PhpWord\Shared\Html::addHtml($section, $medal_lists);
                $section->addPageBreak();
            }
        }
        // return $events;
        $objWriter = IOFactory::createWriter($doc, 'Word2007');
        $objWriter->save('FightResult.docx');

        return response()->download(public_path('FightResult.docx'));
    }
}
