<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\ApiResourceController;
use App\Models\SportDisciplineEvent;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\UpdateSportDisciplineEvent;
use App\Models\EventDistinguishPlayerMethod;
use App\Models\EventRounds;
use App\Models\EventSet;
use App\Models\SubCriteria;
use App\Models\EventStatistic;
use App\Models\Team;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use PhpParser\Node\Stmt\Catch_;

class SportDisciplineEventController extends ApiResourceController
{
    //
    protected function setModel()
    {
        $this->model = new SportDisciplineEvent();
        // TODO: Implement setModel() method.
    }
    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }
    public function store(Request $request)
    {
        try {
            DB::beginTransaction();
            $data = $request->only($this->model->getFillable());
            if ($request->hasFile('files')) {
                $file = $request->file('files');
                $img = Storage::disk('public')->put('sport_discipline_event', $file);
                $data['icon'] = $img;
            }
            $round = json_decode($request->round, true);
            if ($round) {
                foreach ($round as $rd) {
                    EventRounds::query()->where("event_id", $request->sport_discipline_event_id)->create([
                        "event_id" => $request->sport_discipline_event_id,
                        "name" => $rd['name_round'],
                        "is_winner_classification_round" => $rd['is_winner_classification_round']
                    ]);
                }
            }
            $result = $this->query->create($data);
            if ($request->event_distinguish_player_method) {
                if ($request->event_distinguish_player_method == EventDistinguishPlayerMethod::method_id['custom']) {
                    EventDistinguishPlayerMethod::query()->create([
                        'event_id' =>  $result->id,
                        'method_id' => $request->event_distinguish_player_method,
                        'rules' => $request->rules
                    ]);
                } else {
                    EventDistinguishPlayerMethod::query()->create([
                        'event_id' =>  $result->id,
                        'method_id' => $request->event_distinguish_player_method,
                        'rules' => $request->rules
                    ]);
                }
            }

            //sub criterias
            $sub_criterias = json_decode($request->sub_criterias, true);
            foreach ($sub_criterias as $sc) {
                SubCriteria::query()->create([
                    'event_id' => $result->id,
                    'name' => $sc['name'],
                    'type' => $sc['type'],
                    'priority_order' => $sc['priority_order']
                ]);
            }
            DB::commit();
            return $this->createResultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponse($e);
        }
        $set = json_decode($request->set, true);
        if ($set) {
            foreach ($set as $s) {
                EventRounds::query()->where("event_id", $request->sport_discipline_event_id)->create([
                    "event_id" => $request->sport_discipline_event_id,
                    "name" => $s['name'],
                    "is_winner_classification_round" => $s['is_winner_classification_round'],
                ]);
            }
        }
        $result = $this->query->create($data);
        return $this->createResultResponse($result);
    }

    public function update(UpdateSportDisciplineEvent $request, $id)
    {
        $data = $request->only($this->model->getFillable());
        $item = $this->query->where('id', $id)->first();
        if (!$item) {
            return response()->json(['error' => 'Not found'], 404);
        }
        if ($request->hasFile('files')) {
            $exits = Storage::disk('public')->exists($item->icon);
            if ($exits) {
                $delete = Storage::disk('public')->delete($item->icon);
            }
            $file = $request->file('files');
            $img = Storage::disk('public')->put('sport_discipline_event', $file);
            $data['icon'] = $img;
        }
        if ($request->round_type == 3) {
            EventRounds::query()->where("event_id", $id)->delete();
            EventSet::query()->where("event_id", $id)->delete();
        }
        DB::beginTransaction();
        try {
            $round = $request->round;
            $round_id = json_decode($request->round_id, true);
            DB::table('event_rounds')->where("event_id", $id)
                ->whereNotIn("id", $round_id)->delete();
            if ($round) {
                foreach ($round as $rd) {
                    if (isset($rd['id'])) {
                        EventRounds::query()->where("id", $rd['id'])->update([
                            "name" => $rd['name'],
                            "is_winner_classification_round" => $rd['is_winner_classification_round']
                        ]);
                    } else {
                        if (isset($rd['name'])) {
                            EventRounds::query()->create([
                                "event_id" => $id,
                                "name" => $rd['name'],
                                "is_winner_classification_round" => $rd['is_winner_classification_round'],
                            ]);
                        }
                    }
                }
            }
            $set = json_decode($request->set, true);
            $set_id = json_decode($request->set_id, true);
            DB::table('event_sets')->where("event_id", $id)
                ->whereNotIn("id", $set_id)->delete();
            if ($set) {
                foreach ($set as $rd) {
                    if (isset($rd['id'])) {
                        EventSet::query()->where("id", $rd['id'])->update([
                            "name" => $rd['name'],
                        ]);
                    } else {
                        if (isset($rd['name'])) {
                            $sss = EventSet::query()->create([
                                "event_id" => $id,
                                "name" => $rd['name'],
                            ]);
                            Log::info($sss);
                        }
                    }
                }
            }
            $statistic = json_decode($request->statistic, true);
            $statistic_id = json_decode($request->statistic_id, true);
            DB::table('event_statistics')->where("event_id", $id)
                ->whereNotIn("id", $statistic_id)->delete();
            if ($statistic) {
                foreach ($statistic as $rd) {
                    if (isset($rd['id'])) {
                        EventStatistic::query()->where("id", $rd['id'])->update([
                            "name" => $rd['name'],
                        ]);
                    } else {
                        if (isset($rd['name'])) {
                            EventStatistic::query()->create([
                                "event_id" => $id,
                                "name" => $rd['name'],
                            ]);
                        }
                    }
                }
            }
            $item->fill($data);
            $result = $item->update();

            if (!$request->event_distinguish_player_method) {
                EventDistinguishPlayerMethod::query()->where('event_id', $id)->delete();
            } else {
                if ($request->event_distinguish_player_method == EventDistinguishPlayerMethod::method_id['custom']) {
                    EventDistinguishPlayerMethod::query()->updateOrCreate([
                        'event_id' => $id,
                    ], [
                        'method_id' => $request->event_distinguish_player_method,
                        'rules' => $request->rules
                    ]);
                } else {
                    EventDistinguishPlayerMethod::query()->updateOrCreate([
                        'event_id' => $id,
                    ], [
                        'method_id' => $request->event_distinguish_player_method,
                        'rules' => $request->rules
                    ]);
                }
            }

            $sub_criterias = json_decode($request->sub_criterias, true);
            $old_sc = array_filter($sub_criterias, function ($value) {
                return isset($value['id']);
            });
            $old_sc_id = array_map(function ($value) {
                return $value['id'];
            }, $old_sc);
            DB::table('sub_criterias')->where("event_id", $id)->whereNotIN('id', $old_sc_id)->delete();
            foreach ($sub_criterias as $sc) {
                if (isset($sc['id'])) {
                    SubCriteria::query()->find($sc['id'])->update([
                        'name' => $sc['name'],
                        'type' => $sc['type'],
                        'priority_order' => $sc['priority_order']
                    ]);
                } else {
                    SubCriteria::query()->create([
                        'event_id' => $id,
                        'name' => $sc['name'],
                        'type' => $sc['type'],
                        'priority_order' => $sc['priority_order']
                    ]);
                }
            }

            DB::commit();
            return $this->resultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    public function addFilter($request)
    {
        $user = Auth::user();
        $user = User::query()->find($user->id);
        $this->query->with(['sportDiscipline.sport', 'event_rounds', 'event_set', 'event_distinguish_player_method', 'event_statistic']);

        if ($request->document) {
            $this->query->whereHas('files');
        }
        if ($request->by_name) {
            $this->query->with(['entryByName' => function ($query) {
                $query->groupBy('team_id', 'sport_discipline_event_id');
            }, 'members', 'members.nationality']);
        }
        if ($request->by_number) {
            $this->query->with(['entryByNumber']);
        }
        $this->query->join('sport_disciplines', 'sport_discipline_events.sport_discipline_id', '=', 'sport_disciplines.id')
            ->join('sports', 'sport_disciplines.sport_id', '=', 'sports.id');
        $this->query->select('sport_discipline_events.*', 'sports.id as sport_id', 'sports.name as sport_name', 'sports.english_name as sport_english_name', 'sports.icon as sport_icon')
            ->orderBy('sport_id', 'asc')
            ->orderBy('sport_discipline_id', 'asc');
        if ($request->sport_id) {
            $this->query->where('sports.id', '=', $request->sport_id);
        }
        if ($request->team_id) {
            $this->query->whereHas('entryByNumber', function ($query) use ($request) {
                $query->where('team_id', $request->team_id);
            });
        }
    }

    public function addAppend()
    {
        $request = $this->request;
        $team_id = $request->team_id;
        $user = Auth::user();
        $user = User::query()->find($user->id);
        $team_ids = [];
        $this->query->with([
            'stages', 'sportDiscipline.sport', 'participant', 'eventTeam.team',
            'eventTeam.event_team_competitor', 'event_rounds', 'event_set',
            'event_distinguish_player_method', 'event_statistic',
            'sub_criterias' => function ($query) {
                $query->orderBy('priority_order');
            }
        ]);
        if ($request->entry_by_name == 1) {
            if (!$user->hasPermissionTo('all_team')) {
                $teams = Team::query()->get();
                if ($teams) {
                    foreach ($teams as $key => $t) {
                        if ($user->hasPermissionTo($t->name)) {
                            $team_ids[] = $t->id;
                        }
                    }
                }
                $this->query->with(['files.user', 'files' => function ($query) use ($team_ids) {
                    $query->whereIn('team_id', $team_ids);
                }]);
            } else {
                $this->query->with('files.user');
            }
        }

        if ($request->team_id) {
            $this->query->with(['sportDiscipline.sport', 'members.organization', 'members.function', 'members.entryByName', 'members' =>
            function ($query)
            use ($team_id) {
                $query->where('personal_infos.team_id', $team_id);
            }, 'entryByName' => function ($query)
            use ($team_id) {
                $query->where('team_id', $team_id);
            }]);
            //            $this->query->orderBy('sport_id','ASC');
        }
    }

    public function destroy(Request $request, $id)
    {
        // $entry_by_number = EntryByNumber::query()->where('sport_discipline_event_id', $id)->first();
        // $entry_by_name = EntryByName::query()->where('sport_discipline_event_id', $id)->first();

        // $file_entry_by_number = Files::query()->where('ref_id', $id)->first();
        // if ($entry_by_number) {
        //     $entry_by_number->forceDelete();
        // }
        // if ($entry_by_name) {
        //     $entry_by_name->forceDelete();
        // }
        // if ($file_entry_by_number) {
        //     $file_entry_by_number->forceDelete();
        // }
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }
}
