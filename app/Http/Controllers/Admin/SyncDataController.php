<?php

namespace App\Http\Controllers\Admin;

use App\Helpers\SyncDatagraduationGms;
use App\Http\Controllers\ApiResourceController;
use App\Models\SyncDataSetting;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Helpers\SyncDataSeagameGms;
use App\Models\AuditSyncDataSetting;
use App\Models\CardTemplate;
use App\Models\CompetitorVenue;
use App\Models\Country;
use App\Models\Team;
use App\Models\Regions;
use App\Models\EventTeam;
use App\Models\Functions;
use App\Models\Organization;
use App\Models\Participant;
use App\Models\Sport;
use App\Models\SportDiscipline;
use App\Models\SportDisciplineEvent;
use App\Models\CompetitorIndividualEventRelations;
use App\Models\EventTeamCompetitor;
use App\Models\EventUniformColors;
use Carbon\Carbon;
use Illuminate\Database\Query\Expression;
use Illuminate\Support\Facades\Lang;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ClientException;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use PhpParser\ErrorHandler\Throwing;

class SyncDataController extends ApiResourceController
{
    //
    public function setModel()
    {
        $this->model = new SyncDataSetting();
    }

    public function index(Request $request)
    {
        $this->_filter($request);
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function _filter(Request $request)
    {
    }

    public function store(Request $request)
    {
        try {
            DB::beginTransaction();
            $syncData = json_decode($request->syncData);
            foreach ($syncData as $sd) {
                $item = SyncDataSetting::query()->where('id', $sd->id)->first();
                if ($item) {
                    $item->update([
                        'api_url' => $sd->api_url,
                    ]);
                }
            }
            DB::commit();
            return $this->resultResponse($item);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['error' => 'server_error', $e], 500);
        }
    }

    public function syncData(Request $request)
    {
        try {
            $item = SyncDataSetting::query()->where('id', $request->id)->first();
            if ($item) {
                $item->update([
                    'api_url' => $request->api_url,
                ]);
            }
            $sport = new SyncDatagraduationGms();
            $method = "GET";
            $api_url = $request->api_url;
            $id = $request->id;
            $name_data_sync = SyncDataSetting::query()->where("id", $id)->first();
            $params = [];
            $data =   $sport->syncdata($method, $api_url, $params);
            // return response()->json($data);
            if ($name_data_sync) {
                if ($name_data_sync->name == "Sport") {
                    $sport_data  = $this->dataSyncSport($data->sports, $sport);
                    $discipline = $this->dataSyncDiscipline($data->disciplines, $sport);
                    $event = $this->dataSyncEvent($data->events, $sport);
                }
                // return $data->countries;
                if ($name_data_sync->name == "Country") {
                    $country = $this->dataSyncCountry($data->countries, $sport);
                }
                if ($name_data_sync->name == "Teams") {
                    $team = $this->dataSyncTeam($data->teams, $data);
                }
                if ($name_data_sync->name == "Regions") {
                    $regions = $this->dataSyncRegion($data->regions, $data);
                }
                if ($name_data_sync->name == "Functions") {
                    $functions_data = $this->dataSyncFunctions($data->functions);
                }
                if ($name_data_sync->name == "Venue") {
                    $venue_data = $this->dataSyncVenue($data->venues);
                }
                if ($name_data_sync->name == "CardSetting") {
                    $organizations_data = $this->dataOrganizations($data->organizations);
                    $categories_data = $this->dataSyncCategories($data->categories);
                }
            }
            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);;
        } catch (ClientException $e) {
            throw $e;
            $response = $e->getResponse();
            $responseBodyAsString = $response->getStatusCode();
            if ($responseBodyAsString == 404) {
                return response()->json(['message' => Lang::get('response.response_message.api_url_does_not_exist')], 404);
            }
            return $this->errorResponseSystem();
        }
    }

    public function dataSyncFunctions($cardSetting_data)
    {
        $cardSetting_data = array_map(function ($item) {
            return (array) $item;
        }, $cardSetting_data);
        $cardSetting = new Functions();
        $fields = $cardSetting->getFillable();
        DB::table('m_functions')->delete();
        DB::beginTransaction();
        $value = [];
        try {
            foreach ($cardSetting_data as $key => $dt) {
                foreach ($fields as $fl) {
                    $value[$key][$fl] = $dt[$fl];
                }
                $value[$key]['id'] = $dt['id'];
            }
            DB::table('m_functions')->insert($value);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function dataSyncCategories($cardSetting_data)
    {
        $cardSetting_data = array_map(function ($item) {
            return (array) $item;
        }, $cardSetting_data);
        $cardSetting = new CardTemplate();
        $fields = $cardSetting->getFillable();
        DB::table('m_card_templates')->delete();
        DB::beginTransaction();
        $value = [];
        try {
            foreach ($cardSetting_data as $key => $dt) {
                foreach ($fields as $fl) {
                    $value[$key][$fl] = $dt[$fl];
                }
                $value[$key]['id'] = $dt['id'];
            }
            DB::table('m_card_templates')->insert($value);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function dataSyncCountry($data_country, $sport)
    {
        $data_country = array_map(function ($item) {
            return (array) $item;
        }, $data_country);
        $data_country1 = new Country();
        $fields = $data_country1->getFillable();
        //
        // DB::table('m_countries')->delete();
        DB::beginTransaction();
        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('m_countries')->truncate();
        $country_data = [];
        try {
            foreach ($data_country as $key => $dt) {
                foreach ($fields as $fl) {
                    $country_data[$key][$fl] = $dt[$fl];
                }
                $country_data[$key]['id'] = $dt['id'];
                if ($dt['flag_url']) {
                    $image = $sport->syncImage($dt['flag_url']);
                    Storage::disk('public')->put($dt['flag_url'], $image);
                }
            }
            DB::table('m_countries')->insert($country_data);
            AuditSyncDataSetting::query()->where('name', "MasterData")->update(["updated_at" => Carbon::now('Asia/Ho_Chi_Minh')]);
            DB::statement('SET FOREIGN_KEY_CHECKS=1');
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            $this->errorResponseSystem();
        }
    }

    public function dataOrganizations($cardSetting_data)
    {
        $cardSetting_data = array_map(function ($item) {
            return (array) $item;
        }, $cardSetting_data);
        $cardSetting = new Organization();
        $fields = $cardSetting->getFillable();
        DB::table('m_organizations')->delete();
        DB::beginTransaction();
        $value = [];
        try {
            foreach ($cardSetting_data as $key => $dt) {
                foreach ($fields as $fl) {
                    $value[$key][$fl] = $dt[$fl];
                }
                $value[$key]['id'] = $dt['id'];
                $value[$key]['created_at'] = Carbon::now('Asia/Ho_Chi_Minh');
            }
            Organization::query()->insert($value);
            AuditSyncDataSetting::query()->where('name', "CardSetting")->update(["updated_at" => Carbon::now('Asia/Ho_Chi_Minh')]);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            $this->errorResponseSystem();
        }
    }

    public function dataSyncTeam($data_team)
    {
        $data_team = array_map(function ($item) {
            return (array) $item;
        }, $data_team);
        $data_country1 = new Team();
        $fields = $data_country1->getFillable();
        //
        // DB::table('team')->delete();
        DB::beginTransaction();
        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('team')->truncate();
        $team_data = [];
        try {
            foreach ($data_team as $key => $dt) {
                foreach ($fields as $fl) {
                    $team_data[$key][$fl] = $dt[$fl];
                }
                $team_data[$key]['id'] = $dt['id'];
            }
            DB::table('team')->insert($team_data);
            DB::commit();
            DB::statement('SET FOREIGN_KEY_CHECKS=1');
            return 1;
        } catch (\Exception $e) {
            $this->errorResponseSystem();
        }
    }

    public function dataSyncVenue($venue_data)
    {
        $venue_data = array_map(function ($item) {
            return (array) $item;
        }, $venue_data);
        $venue = new CompetitorVenue();
        $fields = $venue->getFillable();
        // DB::table('competitor_venues')->delete();
        DB::beginTransaction();
        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('competitor_venues')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1');
        $value = [];
        try {
            foreach ($venue_data as $key => $dt) {
                foreach ($fields as $fl) {
                    if (isset($dt[$fl])) {
                        $value[$key][$fl] = $dt[$fl];
                    }
                }
                $value[$key]['id'] = $dt['id'];
                $value[$key]['code'] = 'v' . $dt['id'];
            }
            DB::table('competitor_venues')->insert($value);
            AuditSyncDataSetting::query()->where('name', "Venue")->update(["updated_at" => Carbon::now('Asia/Ho_Chi_Minh')]);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }


    public function dataSyncRegion($data_region)
    {
        $data_region = array_map(function ($item) {
            return (array) $item;
        }, $data_region);
        $data_region1 = new Regions();
        $fields = $data_region1->getFillable();
        //
        DB::table('m_regions')->delete();
        DB::beginTransaction();
        $region_data = [];
        try {
            foreach ($data_region as $key => $dt) {
                foreach ($fields as $fl) {
                    $region_data[$key][$fl] = $dt[$fl];
                }
                $region_data[$key]['id'] = $dt['id'];
            }
            DB::table('m_regions')->insert($region_data);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function dataSyncSport($data_sport, $sport)
    {
        //fields
        $data_sport = array_map(function ($item) {
            return (array) $item;
        }, $data_sport);

        $data_sport1 = new Sport();

        $fields = $data_sport1->getFillable();
        //
        // DB::table('sports')->delete();
        DB::beginTransaction();
        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('sports')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1');
        $sport_data = [];

        try {
            foreach ($data_sport as $key => $dt) {
                foreach ($fields as $fl) {
                    $sport_data[$key][$fl] = $dt[$fl];
                }
                $sport_data[$key]['id'] = $dt['id'];
                if ($dt['icon']) {
                    $image = $sport->syncImage($dt['icon']);
                    Storage::disk('public')->put($dt['icon'], $image);
                }
            }
            DB::table('sports')->insert($sport_data);
            AuditSyncDataSetting::query()->where('name', "CardSetting")->update(["updated_at" => Carbon::now('Asia/Ho_Chi_Minh')]);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function dataSyncDiscipline($data_sport, $sport)
    {
        $data_sport = array_map(function ($item) {
            return (array) $item;
        }, $data_sport);
        $result = new SportDiscipline();
        $fields = $result->getFillable();
        //
        // DB::table('sport_disciplines')->delete();
        $data_soprt_discipline = [];
        DB::beginTransaction();

        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('sport_disciplines')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1');

        try {
            foreach ($data_sport as $key => $dt) {
                foreach ($fields as $fl) {
                    $data_soprt_discipline[$key][$fl] = $dt[$fl];
                }
                $data_soprt_discipline[$key]['id'] = $dt['id'];
                if ($dt['icon']) {
                    $image = $sport->syncImage($dt['icon']);
                    Storage::disk('public')->put($dt['icon'], $image);
                }
            }
            DB::table('sport_disciplines')->insert($data_soprt_discipline);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function dataSyncEvent($data_sport, $sport)
    {
        $data_sport = array_map(function ($item) {
            return (array) $item;
        }, $data_sport);
        $result = new SportDisciplineEvent();
        $fields = $result->getFillable();
        //
        // DB::table('sport_discipline_events')->delete();
        $data_soprt_discipline_events = [];
        DB::beginTransaction();

        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::table('sport_discipline_events')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1');

        try {
            foreach ($data_sport as $key => $dt) {
                foreach ($fields as $fl) {
                    if (isset($dt[$fl])) {
                        $data_soprt_discipline_events[$key][$fl] = $dt[$fl];
                    }
                }
                $data_soprt_discipline_events[$key]['id'] = $dt['id'];
                if ($dt['icon']) {
                    $image = $sport->syncImage($dt['icon']);
                    Storage::disk('public')->put($dt['icon'], $image);
                }
            }
            DB::table('sport_discipline_events')->insert($data_soprt_discipline_events);
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function syncDataParticipant(Request $request)
    {
        $participant_url = SyncDataSetting::query()->where('name', 'Participant')->first();
        $sync_data = new SyncDatagraduationGms();
        $method = "GET";
        $api_url = $participant_url->api_url;
        $params = ["team_id" => $request->team_id];
        $data =   $sync_data->syncdata($method, $api_url, $params);
        $participant = $data->participants;
        // return response()->json($participant);
        // Participant::query()->where('team_id', $request->team_id)->forceDelete();
        DB::beginTransaction();
        try {
            foreach ($participant as $dt) {
                DB::table('participants')->updateOrInsert(
                    [
                        'id' => $dt->id,
                    ],
                    [
                        'id' => $dt->id,
                        'card_no' => $dt->card_no,
                        'card_template_id' => $dt->card_template_id,
                        'organization_id' => $dt->organization_id,
                        'function_id' => $dt->function_id,
                        'responsible_organization' => $dt->responsible_organization,
                        'given_name' => $dt->given_name,
                        'family_name' => $dt->family_name,
                        'passport_no' => $dt->passport_no,
                        'passport_expire_date' => $dt->passport_expire_date,
                        'personal_id_card_no' => $dt->personal_id_card_no,
                        'personal_id_card_issue_date' => $dt->personal_id_card_issue_date,
                        'personal_id_card_issue_department' => $dt->personal_id_card_issue_department,
                        'sex' => $dt->sex,
                        'dob' => $dt->dob,
                        'country_of_birth_id' => $dt->country_of_birth_id,
                        'nationality_id' => $dt->nationality_id,
                        'team_id' => $dt->team_id,
                        'permanent_address' => $dt->permanent_address,
                        'approval_status' => $dt->approval_status,
                        'profile_url' => $dt->profile_url,
                        'personal_id_card_url' => $dt->personal_id_card_url,
                        'file_scan' => $dt->file_scan,
                        'sport_id' => $dt->sport_id,
                        'sport_discipline_id' => $dt->sport_discipline_id,
                        'printed_status' => $dt->printed_status,
                        'received_status' => $dt->received_status,
                        'personal_card' => $dt->personal_card,
                        'accreditation_number' => $dt->accreditation_number,
                        'doping_url' => $dt->doping_url,
                        'height' => $dt->height,
                        'weight' => $dt->weight,
                    ]
                );
                if ($dt->profile_url) {
                    $image = $sync_data->syncImage($dt->profile_url);
                    Storage::disk('public')->put($dt->profile_url, $image);
                }
                if ($dt->personal_id_card_url) {
                    $image = $sync_data->syncImage($dt->personal_id_card_url);
                    Storage::disk('public')->put($dt->personal_id_card_url, $image);
                }
            }
            // return response()->json($data);

            // return $event_team_id;
            $entryByNameInvidial = $this->syncDataCompetitorIndividual($data->individual_competitors, $request->team_id);
            $event_teams = $this->syncDataEventTeams($data->event_teams, $request->team_id);
            DB::commit();
            AuditSyncDataSetting::query()->where('name', "Participant")->update(["updated_at" => Carbon::now('Asia/Ho_Chi_Minh')]);
            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function syncDataCompetitorIndividual($entryByNameInvidial, $team_id)
    {
        DB::beginTransaction();
        try {
            // CompetitorIndividualEventRelations::query()->where('team_id', $team_id)->delete();
            foreach ($entryByNameInvidial as $dt) {
                DB::table('competitor_individual_event_relations')->updateOrInsert([
                    "event_id" => $dt->sport_discipline_event_id,
                    "participant_id" => $dt->personal_info_id,
                    "team_id" => $dt->team_id
                ]);
            }
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }
    public function syncDataEventTeams($event_teams, $team_id)
    {
        DB::beginTransaction();
        try {
            foreach ($event_teams as $dt) {
                $event_team =  EventTeam::query()->updateOrCreate(
                    [
                        "team_id" => $dt->team_id,
                        "event_id" => $dt->event_id,
                        "code" => $dt->code
                    ],
                    [
                        "name" => $dt->name,
                    ]
                );
                $team_competitors = $dt->event_team_competitor;
                $uniforms = $dt->uniforms;
                if ($uniforms) {
                    foreach ($uniforms as $eu) {
                        EventUniformColors::query()->updateOrCreate(
                            [
                                'event_team_id' => $event_team->id,
                                'team_id' => $dt->team_id,
                                'no' => $eu->no,
                                'event_id' => $eu->sport_discipline_event_id
                            ],
                            [
                                'player_shirt' => $eu->player_shirt,
                                'player_shorts' => $eu->player_shorts,
                                'goalkeeper_shirt' => $eu->goalkeeper_shirt,
                                'goalkeeper_shorts' => $eu->goalkeeper_shorts
                            ]
                        );
                    }
                }
                $team_competitors1 = $this->syncDataTeamCompetitors($team_competitors, $event_team->id);
            }
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function syncDataTeamCompetitors($team_competitors, $event_team_id)
    {
        DB::beginTransaction();
        try {
            foreach ($team_competitors as $tc) {
                DB::table('event_team_competitors')->updateOrInsert([
                    "event_team_id" => $event_team_id,
                    "competitor_id" => $tc->id,
                ]);
            }
            DB::commit();
            return 1;
        } catch (\Exception $e) {
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }
}
