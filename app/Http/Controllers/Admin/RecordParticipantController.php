<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Models\RecordParticipant;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Lang;
use App\Http\Requests\RecordUpdateRequest;
use App\Http\Requests\RecordStoreRequest;

class RecordParticipantController extends ApiResourceController
{
    public function setModel()
    {
        $this->model = new RecordParticipant();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(Request $request)
    {
        return parent::_store($request); // TODO: Change the autogenerated stub
    }

    public function update(Request $request, $id)
    {
        return parent::_update($request, $id); // TODO: Change the autogenerated stub
    }
    public function destroy(Request $request, $id)
    {
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }

    public function addFilter($request)
    {
        $this->query->with('country', 'event', 'event.sportDiscipline', 'event.sportDiscipline.sport');

        if ($request->sport_discipline_id) {
            $this->query->whereHas('event.sportDiscipline', function ($q) use ($request) {
                $q->where('id', $request->sport_discipline_id);
            });
        }
        if ($request->sport_id) {
            $this->query->whereHas('event.sportDiscipline.sport', function ($q) use ($request) {
                $q->where('id', $request->sport_id);
            });
        }
    }
    public function addAppend()
    {
        $this->query->with('country', 'event', 'event.sportDiscipline', 'event.sportDiscipline.sport');
    }
    public function deleteList(Request $request)
    {
        try {
            DB::beginTransaction();
            if ($request->action == 'force') {
                $id = json_decode($request->ids);

                $delete = RecordParticipant::whereIn('id', $id)->forceDelete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            } else {
                $id = json_decode($request->ids);

                $delete = RecordParticipant::whereIn('id', $id)->delete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            }
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem($e);
        }
    }

    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            if ($column['field'] == 'flag') {
            } else {
                $fields[] = $column['field'];
                $header[] = $column['title'];
            }
        }
        $data = [];
        $record = $this->query->whereIn('id', $id)->with(['event', 'event.sportDiscipline', 'event.sportDiscipline.sport'])->get();
        foreach ($record as $key => $value) {
            // $data[$key]['No']=$key+1;
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
                if ($field === 'take_time') {
                    $take_time = date_create($value['take_time']);
                    $data[$key]['take_time'] = date_format($take_time, 'd-m-Y');
                }
                if ($field == 'country') {
                    isset($data[$key]['country']) &&  $data[$key]['country'] = $value['country']['name'];
                }
                if ($field == 'event') {
                    if (App::getLocale() == "vi") {
                        $data[$key]['event'] = $value['event']['name'];
                    } else {
                        $data[$key]['event'] = $value['event']['english_name'];
                    }
                }
                if ($field == 'sport_discipline') {
                    if (App::getLocale() == "vi") {
                        $data[$key]['sport_discipline'] = $value['event']['sportDiscipline']['name'];
                    } else {
                        $data[$key]['sport_discipline'] = $value['event']['sportDiscipline']['english_name'];
                    }
                }
                if ($field == 'sport') {
                    if (App::getLocale() == "vi") {
                        $data[$key]['sport'] = $value['event']['sportDiscipline']['sport']['name'];
                    } else {
                        $data[$key]['sport'] = $value['event']['sportDiscipline']['sport']['english_name'];
                    }
                }
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['hour']) {
                $unit = Lang::get("constants.unit.hour");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['minute']) {
                $unit = Lang::get("constants.unit.minute");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['seconds']) {
                $unit = Lang::get("constants.unit.seconds");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['kilometer']) {
                $unit = Lang::get("constants.unit.kilometer");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['meter']) {
                $unit = Lang::get("constants.unit.meter");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['centimeter']) {
                $unit = Lang::get("constants.unit.centimeter");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['match']) {
                $unit = Lang::get("constants.unit.match");
            }
            if ($data[$key]['unit'] == RecordParticipant::unit['goal']) {
                $unit = Lang::get("constants.unit.goal");
            }
            $data[$key]['unit'] = $unit;
        }
        return Excel::download(new DataExport($id, $header, $data), 'RecordParticipant.xlsx');
    }
}
