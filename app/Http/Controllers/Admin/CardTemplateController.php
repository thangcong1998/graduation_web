<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Jobs\FormPdfJob;
use Barryvdh\DomPDF\Facade as PDF;
use Dompdf\Options;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Models\CardTemplate;
use App\Models\Functions;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\CardTemplateCreateRequest;
use App\Http\Requests\CardTemplateUpdateRequest;
use Maatwebsite\Excel\Facades\Excel;
use App\Helpers\SyncDataSeagameGms;
use Illuminate\Support\Facades\Lang;

class CardTemplateController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new CardTemplate();
    }

    public function index(Request $request)
    {
        $this->_filter($request);
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(CardTemplateCreateRequest $request)
    {
        $data = $request->only($this->model->getFillable());
        $this->model->fill($data);
        $result = $this->query->create($data);
        FormPdfJob::dispatch($result->id);

        return $this->createResultResponse($result);
    }

    public function update(CardTemplateUpdateRequest $request, $id)
    {
        $data = $request->all();
        if (isset($data['id'])) {
            unset($data['id']);
        }
        $item = $this->query->where('id', $id)->first();
        if (!$item) {
            return response()->json(null, 404);
        }
        $item->fill($data);
        $result = $item->update();
        FormPdfJob::dispatch($id);

        return $this->resultResponse($result);
    }
    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            $fields[] = $column['field'];
            $header[] = $column['title'];
        }
        $data = [];
        $team = $this->query->whereIn('id', $id)->get();
        foreach ($team as $key => $value) {
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
            }
        }
        return Excel::download(new DataExport($id, $header, $data), 'card_template.xlsx');
    }

    private function _filter(Request $request)
    {
        if ($request->name) {
            $this->query->where('name', 'like', '%' . $request->name . '%');
        }
        if ($request->get('sort')) {
            $sort = explode('|', $request->get('sort'));
            $this->query->orderBy($sort[0], $sort[1]);
        }

        if ($request->trashed) {
            $this->query->onlyTrashed();
        }
    }

    public function addFilter($request)
    {
        if ($request->team_has_card) {
            $user = Auth::user();
            $team_id = $user->team_id;
            $this->query->whereHas('personalInfo', function ($query) use ($team_id) {
                $query->where('team_id', $team_id);
            });
        }
    }

    public function destroy(Request $request, $id)
    {
        $cardTemplate = CardTemplate::query()->where('id', $id)->first();
        // return $cardTemplate;
        $cardTemplate->Functions()->forceDelete();
        $cardTemplate->Delete();
        return $this->deleteResultResponse($cardTemplate);
    }
    public function deleteList(Request $request)
    {
        try {
            DB::beginTransaction();
            if ($request->action == 'force') {
                $id = json_decode($request->ids);

                $delete = CardTemplate::whereIn('id', $id)->forceDelete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            } else {
                $id = json_decode($request->ids);

                $delete = CardTemplate::whereIn('id', $id)->delete();
                DB::commit();
                return $this->deleteResultResponse($delete);
            }
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem($e);
        }
    }


    public static function CreateTemplatePDF(Request $request)
    {
        $data = DB::table('m_card_templates')->get();
        foreach ($data as $temp => $value) {
            $cardTemplate = DB::table('m_card_templates')->where('id', $value->id)->first();
            $function = DB::table('m_functions')
                ->join('m_organizations', 'm_organizations.id', '=', 'm_functions.organization_id')
                ->where('card_template_id', $cardTemplate->id)
                ->select('m_organizations.abbreviation', 'm_functions.english_name')
                ->get();
            $organization = '';
            $template = '';
            foreach ($function as $key => $mo) {
                $template = '<p style="margin-bottom: 10px">
                        <span class="blank" >aa</span>
                        <span style="padding: 5px 0px 0px 5px" class="fontSizeSmall">' . $mo->abbreviation . ' - ' . $mo->english_name . ' </span>
                    </p>';
                $organization = $organization . $template;
                $test = $template . $template;
            }
            $data = [
                'card_name' => $cardTemplate->text,
                'back_color_card' => $cardTemplate->background_color,
                'text_color' => $cardTemplate->text_color,
                'organization' => $organization,
            ];
            $pdf = PDF::loadView('pdf_form.register_offline', $data);
            $content = $pdf->download()->getOriginalContent();

            Storage::put('public/TemplatePDF/' . $cardTemplate->text . '.pdf', $content);
        }
        return 1;
    }

    public function renderPdf($id)
    {
        $cardTemplate = DB::table('m_card_templates')->where('id', $id)->first();
        $function = DB::table('m_functions')
            ->join('m_organizations', 'm_organizations.id', '=', 'm_functions.organization_id')
            ->where('card_template_id', $cardTemplate->id)
            ->select('m_organizations.abbreviation', 'm_functions.english_name')
            ->get();
        $organization = '';
        $template = '';
        foreach ($function as $key => $mo) {
            $template = '<p class="function">
                    <span class="block" ></span>
                    <span>' . $mo->abbreviation . ' - ' . $mo->english_name . ' </span>
                </p>';
            $organization = $organization . $template;
            $test = $template . $template;
        }
        $img = DB::table('display_setting')->first();
        $data = [
            'card_name' => $cardTemplate->text,
            'back_color_card' => $cardTemplate->background_color,
            'text_color' => $cardTemplate->text_color,
            'organization' => $organization,
            'img' => $img
        ];
        $options = new Options();
        $options->setIsHtml5ParserEnabled(true);
        $pdf = new PDF($options);
        $formpdf = $pdf::loadView('pdf_form.register_offline', $data);
        $content = $formpdf->download()->getOriginalContent();

        Storage::put('public/TemplatePDF/' . $cardTemplate->name . '.pdf', $content);
    }
    public function syncData(Request $request)
    {
        $syncData = new SyncDataSeagameGms();
        $method = "GET";
        $endpoint = "cardTemplate";
        $params = null;
        $data =   $syncData->syncdata($method, $endpoint, $params);
        $cardTemplate = $data->data;
        // return $cardTemplate;
        CardTemplate::query()->forceDelete();
        DB::beginTransaction();
        try {
            foreach ($cardTemplate as $dt) {
                // return response()->json($dt);
                CardTemplate::insert([
                    'id' => $dt->id,
                    'name' => $dt->name,
                    'background_color' => $dt->background_color,
                    'text' => $dt->text,
                    'text_color' => $dt->text_color,
                ]);
            }
            DB::commit();
            return response()->json(['message' => Lang::get('response.response_message.result_sync_reponse')], 200);
        } catch (\Exception $e) {
            throw  $e;
            $this->errorResponseSystem();
        }
    }
}
