<?php

namespace App\Http\Controllers\Admin;

use App\Models\Stage;
use App\Models\Match;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Models\EventGroupMember;
use App\Models\MatchEventTeam;
use App\Models\MatchIndividualCompetitor;
use App\Models\QualificationSetting;
use App\Models\SportDisciplineEvent;
use Illuminate\Support\Facades\DB;
use phpDocumentor\Reflection\Types\Null_;
use App\Exports\DataExport;
use App\Models\EventQualificationCompetitor;
use App\Models\EventTeam;
use App\Models\Participant;
use App\Models\StageQualificationCompetitor;
use App\Models\SubCriteria;
use Maatwebsite\Excel\Facades\Excel;

class StageController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new Stage();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        //disable ONLY_FULL_GROUP_BY
        DB::statement("SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));");
        if (method_exists($this, 'addAppend')) {
            $this->addAppend();
        }
        $requestData = $request->only($this->model->getFillable());
        $data = $this->query->where($this->model->getTable() . '.' . 'id', $id)->where($requestData)->first();
        if (method_exists($this, 'afterFind')) {
            $this->afterFind($data);
        }
        //re-enable ONLY_FULL_GROUP_BY
        DB::statement("SET sql_mode=(SELECT CONCAT(@@sql_mode, ',ONLY_FULL_GROUP_BY'));");
        return $data ?? response()->json([
            'message' => 'Not found',
        ], 404);
    }

    public function store(Request $request)
    {
        $data = $request->only($this->model->getFillable());
        try {
            DB::beginTransaction();
            $result = $this->query->create($data);
            $rounds = $request->active_rounds;
            $sets = $request->active_sets;
            $result->event_rounds()->attach($rounds, ['event_id' => $request->event_id]);
            $result->event_sets()->attach($sets, ['event_id' => $request->event_id]);
            $setting = new QualificationSetting();
            $awards = $request->awards;
            $qualified_to = $request->qualified_to;
            foreach ($qualified_to as $qt) {
                $setting->query()->create(
                    [
                        'stage_id' => $result->id,
                        'qualification_type' => $setting::qualification_type['qualified'],
                        'qualified_to_stage_id' => $qt
                    ]
                );
            }
            foreach ($awards as $award) {
                $setting->query()->create(
                    [
                        'stage_id' =>  $result->id,
                        'qualification_type' => $award
                    ]
                );
            }
            $new_match_points = array_map(function ($nmp) use ($result) {
                return [
                    'stage_id' => $result->id,
                    'point_name' => $nmp['point_name'],
                    'points' => $nmp['points']
                ];
            }, $request->new_match_points);
            if (count($new_match_points) > 0) {
                DB::table('stage_match_points')->insert($new_match_points);
            }

            $new_round_points = array_map(function ($nrp) use ($result) {
                return [
                    'stage_id' => $result->id,
                    'point_name' => $nrp['point_name'],
                    'points' => $nrp['points']
                ];
            }, $request->new_round_points);
            if (count($new_round_points) > 0) {
                DB::table('round_points')->insert($new_round_points);
            }
            DB::commit();
            return $this->createResultResponse($result);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem();
        }
    }

    public function update(Request $request, $id)
    {

        $data = $request->only($this->model->getFillable());
        $item = $this->query->with('stage_qualification_settings')->where('id', $id)->first();
        $rounds = $request->active_rounds;
        $_rounds = [];
        foreach ($rounds as $round) {
            $_rounds[$round] = ['event_id' => $request->event_id];
        }
        $sets = $request->active_sets;
        $_sets = [];
        foreach ($sets as $set) {
            $_sets[$set] = ['event_id' => $request->event_id];
        }
        try {
            DB::beginTransaction();
            $item->fill($data);
            if ($data['stage_type'] != Stage::stage_type['QUALIFIED_USED_TABLE']) {
                $item->event_groups()->delete();
            }
            $item->event_rounds()->sync($_rounds);
            $item->event_sets()->sync($_sets);
            $setting = new QualificationSetting();
            $awards = $request->awards;
            $qualified_to = $request->qualified_to;
            $setting->query()->where('stage_id', $id)->where('qualification_type', '!=', $setting::qualification_type['qualified'])->whereNotIn('qualification_type', $awards)->delete();
            $setting->query()->where('stage_id', $id)->where('qualification_type', $setting::qualification_type['qualified'])->whereNotIn('stage_id', $qualified_to)->delete();
            foreach ($qualified_to as $qt) {
                $setting->query()->updateOrCreate(
                    [
                        'stage_id' => $item->id,
                        'qualification_type' => $setting::qualification_type['qualified'],
                        'qualified_to_stage_id' => $qt
                    ]
                );
            }
            foreach ($awards as $award) {
                $setting->query()->updateOrCreate(
                    [
                        'stage_id' => $id,
                        'qualification_type' => $award
                    ]
                );
            }
            //match point
            $old_match_points = $request->old_match_points;
            $mp_ids = array_map(function ($omp) {
                return $omp['id'];
            }, $old_match_points);
            DB::table('stage_match_points')->where('stage_id', $id)->whereNotIn('id', $mp_ids)->delete();
            foreach ($old_match_points as $omp) {
                DB::table('stage_match_points')->where('id', $omp['id'])->update([
                    'point_name' => $omp['point_name'],
                    'points' => $omp['points']
                ]);
            }

            $new_match_points = array_map(function ($nmp) use ($id) {
                return [
                    'stage_id' => $id,
                    'point_name' => $nmp['point_name'],
                    'points' => $nmp['points']
                ];
            }, $request->new_match_points);
            if (count($new_match_points) > 0) {
                DB::table('stage_match_points')->insert($new_match_points);
            }
            // round point
            $old_round_points = $request->old_round_points;
            $rp_ids = array_map(function ($orp) {
                return $orp['id'];
            }, $old_round_points);
            DB::table('round_points')->where('stage_id', $id)->whereNotIn('id', $rp_ids)->delete();
            foreach ($old_round_points as $orp) {
                DB::table('round_points')->where('id', $orp['id'])->update([
                    'point_name' => $orp['point_name'],
                    'points' => $orp['points']
                ]);
            }

            $new_round_points = array_map(function ($nrp) use ($id) {
                return [
                    'stage_id' => $id,
                    'point_name' => $nrp['point_name'],
                    'points' => $nrp['points']
                ];
            }, $request->new_round_points);
            if (count($new_round_points) > 0) {
                DB::table('round_points')->insert($new_round_points);
            }

            $result = $item->update();
            DB::commit();
            return $this->resultResponse($result);
        } catch (\Exception $e) {
            throw $e;
            DB::rollBack();
            return $this->errorResponseSystem();
        }
        $item->fill($data);
        $result = $item->update();
        return $this->resultResponse($result);
    }

    public function destroy(Request $request, $id)
    {
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }

    public function addFilter($request)
    {
        $this->query->with('event.event_rounds');
    }

    public function updateGroup(Request $request, $id)
    {
        try {
            $groups = $request->groups;
            $stage = Stage::query()->with('event')->where('id', $id)->first();
            $event = $stage->event;
            $_event = new SportDisciplineEvent();
            DB::beginTransaction();

            if ($event->competition_type == $_event::competition_type['INDIVIDUAL']) {
                foreach ($groups as $group) {
                    EventGroupMember::query()->where('event_group_id', $group['id'])->delete();
                    foreach ($group['group_members'] as $grm) {
                        EventGroupMember::create([
                            'event_group_id' => $group['id'],
                            'individual_competitor_id' => $grm['id']
                        ]);
                    }
                }
            } else if ($event->competition_type == $_event::competition_type['TEAM']) {
                foreach ($groups as $group) {
                    EventGroupMember::query()->where('event_group_id', $group['id'])->delete();
                    foreach ($group['group_members'] as $grm) {
                        EventGroupMember::create([
                            'event_group_id' => $group['id'],
                            'event_team_id' => $grm['id']
                        ]);
                    }
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            $this->errorResponse();
        }
    }

    public function getRankTable(Request $request, $id)
    {
        $item = $this->query->with('event', 'event_groups', 'qualified_competitors')->where('id', $id)->first();
        $sort_type = $item->sort_type != Stage::sort_type['DESC'] ? 'ASC' : 'DESC';
        $event = SportDisciplineEvent::query()->with(['participant', 'eventTeam', 'sub_criterias' => function ($q) {
            $q->orderBy('priority_order');
        }])->find($item['event']['id']);
        $sub_criterias = $event['sub_criterias'];

        if (!$item) {
            return response()->json([
                'message' => 'Not found',
            ], 404);
        }
        $rank_tables = [];
        if ($item->stage_type == Stage::stage_type['QUALIFIED_USED_TABLE']) {
            foreach ($item['event_groups'] as $key => $group) {
                $egm = new EventGroupMember;
                $query = $egm->query();
                $rank_tables[$key]['group'] = $group;
                if (count($sub_criterias) == 0) {
                    //match point
                    if ($item->rank_type == Stage::rank_type['MATCH_POINT']) {
                        if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                            $query
                                ->with(['participant.stage_qualification_competitors' => function ($query) use ($id) {
                                    $query->where('stage_id', $id);
                                }])
                                ->where('event_group_member.event_group_id', $group->id)
                                ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                                ->leftJoin('match_individual_competitors as mic', function ($join) {
                                    $join->on('mic.competitor_id', '=', 'event_group_member.individual_competitor_id');
                                    $join->on('mic.event_group_member_id', '=', 'event_group_member.id');
                                })
                                ->leftJoin('matches as m', function ($join) use ($id) {
                                    $join->on('m.id', '=', 'mic.match_id')->whereNull('deleted_at');
                                    $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('deleted_at');
                                })
                                ->where('eg.stage_id', $id)
                                ->selectRaw('
                                COUNT(IF(mic.id, 1, NULL)) as total_matches,
                                COUNT(IF(mic.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(mic.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(mic.is_winner = 3, 1, NULL)) draw, 
                                event_group_member.event_group_id, 
                                individual_competitor_id, 
                                COALESCE(sum(mic.match_point),0) as score')
                                ->groupBy('event_group_member.event_group_id', 'individual_competitor_id')
                                ->orderBy('score', $sort_type);
                        }
                        if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                            $query
                                ->with(['event_team.stage_qualification_competitors' => function ($query) use ($id) {
                                    $query->where('stage_id', $id);
                                }])
                                ->where('event_group_member.event_group_id', $group->id)
                                ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                                ->leftJoin('event_group', 'event_group_id', '=', 'event_group.id')
                                ->leftJoin('match_event_teams as met', function ($join) {
                                    $join->on('met.event_team_id', '=', 'event_group_member.event_team_id');
                                    $join->on('met.event_group_member_id', '=', 'event_group_member.id');
                                })
                                ->leftJoin('matches as m', function ($join) use ($id) {
                                    $join->on('m.id', '=', 'met.match_id')->whereNull('deleted_at');
                                    $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('deleted_at');
                                })
                                ->where('event_group_member.event_group_id', $group->id)
                                ->where('eg.stage_id', $id)
                                ->selectRaw(
                                    '
                                COUNT(IF(met.id, 1, NULL)) as total_matches,
                                COUNT(IF(met.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(met.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(met.is_winner = 3, 1, NULL)) draw, 
                                event_group_member.event_group_id, 
                                event_group_member.event_team_id,
                                COALESCE(sum(met.match_point),0) as score,
                                event_group_member.id'
                                )
                                ->groupBy('event_group_member.id', 'event_group_member.event_group_id')
                                ->orderBy('score', $sort_type);
                        }
                    }
                    //record
                    if ($item->rank_type == Stage::rank_type['RECORD']) {
                        if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                            $query
                                ->where('event_group_member.event_group_id', $group->id)
                                ->with(['participant.stage_qualification_competitors' => function ($query) use ($id) {
                                    $query->where('stage_id', $id);
                                }])
                                ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                                ->leftJoin('match_individual_competitors as mic', function ($join) {
                                    $join->on('mic.competitor_id', '=', 'event_group_member.individual_competitor_id');
                                    $join->on('mic.event_group_member_id', '=', 'event_group_member.id');
                                })
                                ->leftJoin('matches as m', function ($join) use ($id) {
                                    $join->on('m.id', '=', 'mic.match_id')->whereNull('m.deleted_at');
                                    $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                                })
                                ->where('eg.stage_id', $id)
                                // ->where('m.event_group_id', $group->id)
                                ->selectRaw('MIN(mic.final_score + 0) as score, individual_competitor_id')
                                ->groupBy('individual_competitor_id')
                                // ->orderBy('score', $sort_type)
                                ->orderByRaw("'-score' $sort_type");
                        }
                        if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                            $query
                                ->where('event_group_member.event_group_id', $group->id)
                                ->with(['event_team.stage_qualification_competitors' => function ($query) use ($id) {
                                    $query->where('stage_id', $id);
                                }])
                                ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                                ->leftJoin('match_event_teams as met', function ($join) {
                                    $join->on('met.event_team_id', '=', 'event_group_member.event_team_id');
                                    $join->on('met.event_group_member_id', '=', 'event_group_member.id');
                                })
                                ->leftJoin('matches as m', function ($join) use ($id) {
                                    $join->on('m.id', '=', 'met.match_id')->whereNull('deleted_at');
                                    $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('deleted_at');
                                })
                                ->where('eg.stage_id', $id)
                                ->where('m.event_group_id', $group->id)
                                ->selectRaw('MIN(final_score + 0) as score, event_group_member.event_team_id')
                                ->groupBy('event_group_member.event_group_id', 'event_group_member.event_team_id')
                                ->orderByRaw("'-score' $sort_type");
                        }
                    }
                } else {
                    $query->where('event_group_member.event_group_id', $group->id);
                    // individual
                    if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                        $query->with([
                            'participant.stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            },
                            'stage_sub_criterias_relations' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }
                        ])
                            ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                            ->leftJoin('match_individual_competitors as mic', function ($join) {
                                $join->on('mic.competitor_id', '=', 'event_group_member.individual_competitor_id');
                                $join->on('mic.event_group_member_id', '=', 'event_group_member.id');
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.id', '=', 'mic.match_id')->whereNull('m.deleted_at');
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->where('eg.stage_id', $id);
                        foreach ($sub_criterias as $sc) {
                            switch ($sc['type']) {
                                case SubCriteria::type['win_match']:
                                    $query->selectRaw('
                                    COUNT(IF(mic.is_winner = 1, 1, NULL)) win,
                                    COUNT(IF(mic.is_winner = 2, 1, NULL)) lose,
                                    COUNT(IF(mic.is_winner = 3, 1, NULL)) draw')
                                        ->orderBy('win', 'DESC');
                                    break;
                                case SubCriteria::type['score']:
                                    $query->selectRaw('COALESCE(sum(mic.match_point),0) as score')
                                        ->orderBy('score', 'DESC');
                                    break;
                                case SubCriteria::type['difference']:
                                    break;
                                case SubCriteria::type['goal']:
                                    $query->selectRaw("
                                            COALESCE(SUM(mic.final_score), 0) as goal
                                        ")->orderBy('goal', 'DESC');
                                    break;
                                default:
                                    $query->selectRaw("
                                            COALESCE((select total_value from stage_sub_criterias_relations as sscr 
                                                where sscr.stage_id = $id
                                                and sscr.competitor_id = event_group_member.individual_competitor_id
                                                and sscr.sub_criteria_id = " . $sc['id'] . "
                                            ),0) as 'val_sub_criteria_" . $sc['id'] . "'
                                        ")->orderBy('val_sub_criteria_' . $sc['id'], 'DESC');
                                    break;
                            }
                        }
                        $query->selectRaw('COUNT(IF(mic.id, 1, NULL)) as total_matches, event_group_member.event_group_id, individual_competitor_id')
                            ->groupBy('event_group_member.event_group_id', 'individual_competitor_id');
                    }
                    // team
                    if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                        $query->with([
                            'event_team.stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            },
                            'stage_sub_criterias_relations' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }
                        ])
                            ->join('event_group as eg', 'event_group_member.event_group_id', '=', 'eg.id')
                            ->leftJoin('match_event_teams as met', function ($join) {
                                $join->on('met.event_team_id', '=', 'event_group_member.event_team_id');
                                $join->on('met.event_group_member_id', '=', 'event_group_member.id');
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.id', '=', 'met.match_id')->whereNull('m.deleted_at');
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->where('eg.stage_id', $id);
                        foreach ($sub_criterias as $sc) {
                            switch ($sc['type']) {
                                case SubCriteria::type['win_match']:
                                    $query->selectRaw('
                                    COUNT(IF(met.is_winner = 1, 1, NULL)) win,
                                    COUNT(IF(met.is_winner = 2, 1, NULL)) lose,
                                    COUNT(IF(met.is_winner = 3, 1, NULL)) draw')
                                        ->orderBy('win', 'DESC');
                                    break;
                                case SubCriteria::type['score']:
                                    $query->selectRaw('COALESCE(sum(met.match_point),0) as score')
                                        ->orderBy('score', 'DESC');
                                    break;
                                case SubCriteria::type['difference']:
                                    break;
                                case SubCriteria::type['goal']:
                                    $query->selectRaw("
                                        COALESCE(SUM(met.final_score), 0) as goal
                                    ")->orderBy('goal', 'DESC');
                                    break;
                                default:
                                    $query->selectRaw("
                                        COALESCE((select total_value from stage_sub_criterias_relations as sscr 
                                            where sscr.stage_id = $id
                                            and sscr.event_team_id = event_group_member.event_team_id
                                            and sscr.sub_criteria_id = " . $sc['id'] . "
                                        ),0) as 'val_sub_criteria_" . $sc['id'] . "'
                                    ")->orderBy('val_sub_criteria_' . $sc['id'], 'DESC');
                                    break;
                            }
                        }
                        $query->selectRaw('COUNT(IF(met.id, 1, NULL)) as total_matches, event_group_member.event_group_id, event_group_member.event_team_id')
                            ->groupBy('event_group_member.event_group_id', 'event_group_member.event_team_id');
                    }
                }
                $rank_tables[$key]['rank_table'] = $query->get();
            }
        }
        // round robin
        if ($item->stage_type == Stage::stage_type['ROUND_ROBIN']) {
            $competitors = [];
            $competitor_ids = [];
            if (count($item->qualified_competitors) > 0) {
                $competitors = $item->qualified_competitors;
                foreach ($competitors as $cp) {
                    if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                        $competitor_ids[] = $cp['participant_id'];
                    }
                    if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                        $competitor_ids[] = $cp['event_team_id'];
                    }
                }
            } else {
                if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                    $competitors = $event->participant;

                    foreach ($competitors as $cp) {
                        $competitor_ids[] = $cp['id'];
                    }
                }
                if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                    $competitors = $event->eventTeam;
                    foreach ($competitors as $cp) {
                        $competitor_ids[] = $cp['event_team_id'];
                    }
                }
            }
            if ($event->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                $participant = new Participant();
                $query = $participant->query();
                $query->whereIn('participants.id', $competitor_ids);
                if (count($sub_criterias) == 0) {
                    //match point
                    if ($item->rank_type == Stage::rank_type['MATCH_POINT']) {
                        $query
                            ->with(['stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }])
                            ->leftJoin('stages as s', function ($join) use ($id) {
                                $join->on('s.id', '=', DB::raw("$id"));
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->leftJoin('match_individual_competitors as mic', function ($join) {
                                $join->on('mic.match_id', '=', 'm.id');
                                $join->on('mic.competitor_id', '=', 'participants.id');
                            })
                            ->selectRaw('
                                COUNT(IF(mic.id, 1, NULL)) as total_matches,
                                COUNT(IF(mic.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(mic.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(mic.is_winner = 3, 1, NULL)) draw, 
                                COALESCE(sum(mic.match_point),0) as score,
                                participants.id, 
                                participants.team_id, 
                                participants.given_name, 
                                participants.family_name')
                            ->groupBy('participants.id')
                            ->orderBy('score', $sort_type);
                    }
                    //record
                    if ($item->rank_type == Stage::rank_type['RECORD']) {
                        $query
                            ->with(['stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }])
                            ->leftJoin('stages as s', function ($join) use ($id) {
                                $join->on('s.id', '=', DB::raw("$id"));
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->leftJoin('match_individual_competitors as mic', function ($join) {
                                $join->on('mic.match_id', '=', 'm.id');
                                $join->on('mic.competitor_id', '=', 'participants.id');
                            })
                            ->selectRaw('
                                MIN(mic.final_score + 0) as score, 
                                participants.id, 
                                participants.team_id, 
                                participants.given_name, 
                                participants.family_name')
                            ->groupBy('participants.id')
                            ->orderByRaw("'-score' $sort_type");
                    }
                } else {
                    //subcriterias
                    $query->with(['stage_qualification_competitors' => function ($query) use ($id) {
                        $query->where('stage_id', $id);
                    }])
                        ->leftJoin('stages as s', function ($join) use ($id) {
                            $join->on('s.id', '=', DB::raw("$id"));
                        })
                        ->leftJoin('matches as m', function ($join) use ($id) {
                            $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                        })
                        ->leftJoin('match_individual_competitors as mic', function ($join) {
                            $join->on('mic.match_id', '=', 'm.id');
                            $join->on('mic.competitor_id', '=', 'participants.id');
                        });
                    foreach ($sub_criterias as $sc) {
                        switch ($sc['type']) {
                            case SubCriteria::type['win_match']:
                                $query->selectRaw('
                                COUNT(IF(mic.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(mic.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(mic.is_winner = 3, 1, NULL)) draw')
                                    ->orderBy('win', 'DESC');
                                break;
                            case SubCriteria::type['score']:
                                $query->selectRaw('COALESCE(sum(mic.match_point),0) as score')
                                    ->orderBy('score', 'DESC');
                                break;
                            case SubCriteria::type['difference']:
                                break;
                            case SubCriteria::type['goal']:
                                $query->selectRaw("
                                        COALESCE(SUM(mic.final_score), 0) as goal
                                    ")->orderBy('goal', 'DESC');
                                break;
                            default:
                                $query->selectRaw("
                                        COALESCE((select total_value from stage_sub_criterias_relations as sscr 
                                            where sscr.stage_id = $id
                                            and sscr.competitor_id = participants.id
                                            and sscr.sub_criteria_id = " . $sc['id'] . "
                                        ),0) as 'val_sub_criteria_" . $sc['id'] . "'
                                    ")->orderBy('val_sub_criteria_' . $sc['id'], 'DESC');
                                break;
                        }
                    }
                    $query->selectRaw(
                        '
                        COUNT(IF(mic.id, 1, NULL)) as total_matches,
                        participants.id, 
                        participants.team_id, 
                        participants.given_name, 
                        participants.family_name'
                    )
                        ->groupBy('participants.id');
                }
            }
            //Team
            if ($event->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                $participant = new EventTeam();
                $query = $participant->query();
                $query->whereIn('event_teams.id', $competitor_ids);
                if (count($sub_criterias) == 0) {
                    //match point
                    if ($item->rank_type == Stage::rank_type['MATCH_POINT']) {
                        $query
                            ->with(['stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }])
                            ->leftJoin('stages as s', function ($join) use ($id) {
                                $join->on('s.id', '=', DB::raw("$id"));
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->leftJoin('match_event_teams as met', function ($join) {
                                $join->on('met.match_id', '=', 'm.id');
                                $join->on('met.competitor_id', '=', 'event_teams.id');
                            })
                            ->selectRaw('
                                COUNT(IF(met.id, 1, NULL)) as total_matches
                                COUNT(IF(met.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(met.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(met.is_winner = 3, 1, NULL)) draw, 
                                COALESCE(sum(mic.match_point),0) as score,
                                event_teams.id,
                                event_teams.team_id, 
                                event_teams.name')
                            ->groupBy('event_teams.id')
                            ->orderBy('score', $sort_type);
                    }
                    //record
                    if ($item->rank_type == Stage::rank_type['RECORD']) {
                        $query
                            ->with(['stage_qualification_competitors' => function ($query) use ($id) {
                                $query->where('stage_id', $id);
                            }])
                            ->leftJoin('stages as s', function ($join) use ($id) {
                                $join->on('s.id', '=', DB::raw("$id"));
                            })
                            ->leftJoin('matches as m', function ($join) use ($id) {
                                $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                            })
                            ->leftJoin('match_event_teams as met', function ($join) {
                                $join->on('met.match_id', '=', 'm.id');
                                $join->on('met.competitor_id', '=', 'event_teams.id');
                            })
                            ->selectRaw('
                                MIN(mic.final_score + 0) as score,
                                event_teams.id,
                                event_teams.team_id, 
                                event_teams.name
                            ')
                            ->groupBy('event_teams.id')
                            ->orderByRaw("'-score' $sort_type");
                    }
                } else {
                    // subcriterias
                    $query->with(['stage_qualification_competitors' => function ($query) use ($id) {
                        $query->where('stage_id', $id);
                    }])
                        ->leftJoin('stages as s', function ($join) use ($id) {
                            $join->on('s.id', '=', DB::raw("$id"));
                        })
                        ->leftJoin('matches as m', function ($join) use ($id) {
                            $join->on('m.stage_id', '=', DB::raw("$id"))->whereNull('m.deleted_at');
                        })
                        ->leftJoin('match_event_teams as met', function ($join) {
                            $join->on('met.match_id', '=', 'm.id');
                            $join->on('met.competitor_id', '=', 'event_teams.id');
                        });
                    foreach ($sub_criterias as $sc) {
                        switch ($sc['type']) {
                            case SubCriteria::type['win_match']:
                                $query->selectRaw('
                                COUNT(IF(met.is_winner = 1, 1, NULL)) win,
                                COUNT(IF(met.is_winner = 2, 1, NULL)) lose,
                                COUNT(IF(met.is_winner = 3, 1, NULL)) draw')
                                    ->orderBy('win', 'DESC');
                                break;
                            case SubCriteria::type['score']:
                                $query->selectRaw('COALESCE(sum(met.match_point),0) as score')
                                    ->orderBy('score', 'DESC');
                                break;
                            case SubCriteria::type['difference']:
                                break;
                            case SubCriteria::type['goal']:
                                $query->selectRaw("
                                    COALESCE(SUM(met.final_score), 0) as goal
                                ")->orderBy('goal', 'DESC');
                                break;
                            default:
                                $query->selectRaw("
                                    COALESCE((select total_value from stage_sub_criterias_relations as sscr 
                                        where sscr.stage_id = $id
                                        and sscr.event_team_id = event_teams.id
                                        and sscr.sub_criteria_id = " . $sc['id'] . "
                                    ),0) as 'val_sub_criteria_" . $sc['id'] . "'
                                ")->orderBy('val_sub_criteria_' . $sc['id'], 'DESC');
                                break;
                        }
                    }
                    $query->selectRaw('
                        COUNT(IF(met.id, 1, NULL)) as total_matches,
                        event_teams.id,
                        event_teams.team_id, 
                        event_teams.name
                        ')
                        ->groupBy('event_teams.id');
                }
            }
            $rank_tables['rank_table'] = $query->get();
        }
        return $rank_tables;
    }

    public function qualifiedTableStage(Request $request, $id)
    {
        $stage = $this->query->find($id);
        if (!$stage) {
            return response()->json([
                'message' => 'Not found',
            ], 404);
        }
        $event = SportDisciplineEvent::query()->find($stage->event_id);
        try {
            DB::beginTransaction();
            if ($stage->stage_type == Stage::stage_type['QUALIFIED_USED_TABLE']) {
                $rank_tables = $request->rank_tables;

                if ($request->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                    foreach ($rank_tables as $rank_table) {
                        foreach ($rank_table as $participant) {
                            $setting = DB::table('stage_qualification_settings')->where('id', $participant['stage_qualification_setting_id'])->first();
                            if ($setting) {
                                if ($setting->qualification_type == QualificationSetting::qualification_type['qualified']) {
                                    DB::table('stage_qualification_competitors')->updateOrInsert(
                                        [
                                            'stage_id' => $id,
                                            'participant_id' => $participant['individual_competitor_id'],
                                            'team_id' => $participant['team_id']
                                        ],
                                        [
                                            'qualification_type' => $setting->qualification_type,
                                            'qualified_to_stage_id' => $setting->qualified_to_stage_id,
                                            'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                        ]
                                    );
                                } else {
                                    DB::table('stage_qualification_competitors')->updateOrInsert(
                                        [
                                            'stage_id' => $id,
                                            'participant_id' => $participant['individual_competitor_id'],
                                            'team_id' => $participant['team_id'],
                                        ],
                                        [
                                            'qualification_type' => $setting->qualification_type,
                                            'qualified_to_stage_id' => null,
                                            'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                        ]
                                    );
                                }
                            } else {
                                $result =  StageQualificationCompetitor::query()->where('stage_id', $id)->where('participant_id',  $participant['individual_competitor_id'])->first();
                                if ($result) {
                                    $result->delete();
                                }
                            }
                        }
                    }
                }
                if ($request->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                    foreach ($rank_tables as $rank_table) {
                        foreach ($rank_table as $participant) {
                            $setting = DB::table('stage_qualification_settings')->where('id', $participant['stage_qualification_setting_id'])->first();
                            if ($setting) {
                                if ($setting->qualification_type == QualificationSetting::qualification_type['qualified']) {
                                    DB::table('stage_qualification_competitors')->updateOrInsert(
                                        [
                                            'stage_id' => $id,
                                            'event_team_id' => $participant['event_team_id'],
                                            'team_id' => $participant['team_id'],
                                        ],
                                        [
                                            'qualification_type' => $setting->qualification_type,
                                            'qualified_to_stage_id' => $setting->qualified_to_stage_id,
                                            'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                        ]
                                    );
                                } else {
                                    DB::table('stage_qualification_competitors')->updateOrInsert(
                                        [
                                            'stage_id' => $id,
                                            'event_team_id' => $participant['event_team_id'],
                                            'team_id' => $participant['team_id']
                                        ],
                                        [
                                            'qualification_type' => $setting->qualification_type,
                                            'qualified_to_stage_id' => null,
                                            'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                        ]
                                    );
                                }
                            } else {
                                $result =  StageQualificationCompetitor::query()->where('stage_id', $id)->where('event_team_id',  $participant['event_team_id'])->first();
                                if ($result) {
                                    $result->delete();
                                }
                            }
                        }
                    }
                }
            }
            if ($stage->stage_type == Stage::stage_type['ROUND_ROBIN']) {
                $rank_table = $request->rank_tables;
                if ($request->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                    foreach ($rank_table as $participant) {
                        $eqc = EventQualificationCompetitor::query()
                            ->where('participant_id', $participant['id'])
                            ->where('event_id', $event->id)
                            ->where('team_id', $participant['team_id'])
                            ->first();
                        $setting = DB::table('stage_qualification_settings')->where('id', $participant['stage_qualification_setting_id'])->first();
                        if ($setting) {
                            if ($setting->qualification_type == QualificationSetting::qualification_type['qualified']) {
                                $sqc = StageQualificationCompetitor::query()
                                    ->where('stage_id', $id)
                                    ->where('participant_id', $participant['id'])
                                    ->first();
                                if ($sqc->qualification_type > QualificationSetting::qualification_type['qualified']) {
                                    if ($eqc) {
                                        $eqc->delete();
                                    }
                                }
                                DB::table('stage_qualification_competitors')->updateOrInsert(
                                    [
                                        'stage_id' => $id,
                                        'participant_id' => $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type,
                                        'qualified_to_stage_id' => $setting->qualified_to_stage_id,
                                        'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                    ]
                                );
                            } else {
                                DB::table('stage_qualification_competitors')->updateOrInsert(
                                    [
                                        'stage_id' => $id,
                                        'participant_id' => $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type,
                                        'qualified_to_stage_id' => null,
                                        'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                    ]
                                );
                                EventQualificationCompetitor::query()->updateOrCreate(
                                    [
                                        'event_id' =>  $event->id,
                                        'participant_id' =>  $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type
                                    ]
                                );
                            }
                        } else {
                            $result =  StageQualificationCompetitor::query()->where('stage_id', $id)->where('participant_id',  $participant['id'])->first();
                            if ($result) {
                                $result->delete();
                            }
                            if ($eqc) {
                                $eqc->delete();
                            }
                        }
                    }
                }
                if ($request->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                    foreach ($rank_tables as $participant) {
                        $eqc = EventQualificationCompetitor::query()
                            ->where('event_team_id', $participant['id'])
                            ->where('event_id', $event->id)
                            ->where('team_id', $participant['team_id'])
                            ->first();
                        $setting = DB::table('stage_qualification_settings')->where('id', $participant['stage_qualification_setting_id'])->first();
                        if ($setting) {
                            if ($setting->qualification_type == QualificationSetting::qualification_type['qualified']) {
                                $sqc = StageQualificationCompetitor::query()
                                    ->where('stage_id', $id)
                                    ->where('event_team_id', $participant['id'])
                                    ->first();
                                if ($sqc->qualification_type > QualificationSetting::qualification_type['qualified']) {
                                    if ($eqc) {
                                        $eqc->delete();
                                    }
                                }
                                DB::table('stage_qualification_competitors')->updateOrInsert(
                                    [
                                        'stage_id' => $id,
                                        'event_team_id' => $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type,
                                        'qualified_to_stage_id' => $setting->qualified_to_stage_id,
                                        'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                    ]
                                );
                            } else {
                                DB::table('stage_qualification_competitors')->updateOrInsert(
                                    [
                                        'stage_id' => $id,
                                        'event_team_id' => $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type,
                                        'qualified_to_stage_id' => null,
                                        'stage_qualification_setting_id' => $participant['stage_qualification_setting_id']
                                    ]
                                );
                                EventQualificationCompetitor::query()->updateOrCreate(
                                    [
                                        'event_id' =>  $event->id,
                                        'event_team_id' =>  $participant['id'],
                                        'team_id' => $participant['team_id']
                                    ],
                                    [
                                        'qualification_type' => $setting->qualification_type
                                    ]
                                );
                            }
                        } else {
                            $result =  StageQualificationCompetitor::query()->where('stage_id', $id)->where('event_team_id',  $participant['id'])->first();
                            if ($result) {
                                $result->delete();
                            }
                            if ($eqc) {
                                $eqc->delete();
                            }
                        }
                    }
                }
            }

            DB::commit();
            return $this->resultResponse(true);
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function addAppend()
    {
        $this->query->with([
            'event.sportDiscipline.sport',
            'event.participant',
            'event.eventTeam.team',
            'event.eventTeam.event_team_competitor',
            'event.venues.venue',
            'event.event_rounds',
            'event.event_set',
            'event.sub_criterias' => function ($query) {
                $query->orderBy('priority_order');
            },
            'matches.competitors',
            'matches.event_teams.team',
            'matches' => function ($query) {
                $query->orderBy('start_time');
            },
            'event_groups.group_members',
            'event_groups.group_members.participant.team',
            'event_groups.group_members.event_team.team',
            'event_groups.matches.competitors',
            'event_groups.matches.event_teams.team',
            'competition_dates' => function ($query) {
                $query->orderBy('event_date')->groupBy('event_date');
            },
            'event_rounds',
            'event_sets',
            'stage_qualification_settings.qualified_to_stage',
            'match_points',
            'round_points',
            'qualified_competitors.competitor',
            'qualified_competitors.event_team',
        ]);
    }

    public function exportData(Request $request)
    {
        $id = json_decode($request->ids);
        $header = [];
        $fields = [];
        $columns = json_decode($request->columns, true);
        foreach ($columns as $column) {
            if ($column['field'] == 'flag') {
            } else {
                $fields[] = $column['field'];
                $header[] = $column['title'];
            }
        }
        $data = [];
        $country = $this->query->whereIn('id', $id)->get();
        foreach ($country as $key => $value) {
            // $data[$key]['No']=$key+1;
            foreach ($fields as $field) {
                $data[$key][$field] = $value[$field];
            }
        }
        return Excel::download(new DataExport($id, $header, $data), 'Stage.xlsx');
    }

    public function getStageRankTable(Request $request)
    {
        $event_id = $request->event_id;
        $event = SportDisciplineEvent::query()->with([
            'participant',
            'eventTeam',
            'stages'
        ])->find($request->event_id);
        $ranktable = [];
        if ($event->competition_type ==  SportDisciplineEvent::competition_type['INDIVIDUAL']) {
            $competitor_ids = [];
            foreach ($event->participant as $pa) {
                $competitor_ids[] = $pa->id;
            }
            $stage_ids = [];
            foreach ($event->stages as $st) {
                $stage_ids[] = $st->id;
            }
            $match = new Participant();
            $query = $match->query();
            $query->with(['event_qualification_competitors' => function ($query) use ($event_id) {
                $query->where('event_id', $event_id);
            }]);
            $query->leftJoin('competitor_individual_event_relations as cier', 'cier.participant_id', '=', 'participants.id')
                ->leftJoin('stages as s', 's.event_id', '=', 'cier.event_id')
                ->leftJoin('matches as m', function ($join) use ($stage_ids) {
                    $join->on('m.stage_id', '=', 's.id')->whereNull('m.deleted_at');
                })
                ->leftJoin('match_individual_competitors as mic', function ($join) {
                    $join->on('mic.competitor_id', '=', "participants.id");
                    $join->on('mic.match_id', '=', 'm.id');
                })
                ->where('cier.event_id', $event_id)
                ->whereIn('participants.id', $competitor_ids)
                ->selectRaw("
                    participants.id, 
                    participants.team_id,
                    participants.family_name,
                    participants.given_name,
                    COALESCE(SUM(mic.final_score), 0) as score
                    ")
                ->groupBy("participants.id")
                ->orderByRaw("score DESC");

            $ranktable['rank_table'] = $query->get();
        }
        if ($event->competition_type ==  SportDisciplineEvent::competition_type['TEAM']) {
            $event_team_ids = [];
            foreach ($event->eventTeam as $et) {
                $event_team_ids[] = $et->id;
            }
            $stage_ids = [];
            foreach ($event->stages as $st) {
                $stage_ids[] = $st->id;
            }
            $match = new EventTeam();
            $query = $match->query();
            $query->with(['event_qualification_competitors' => function ($query) use ($event_id) {
                $query->where('event_id', $event_id);
            }]);
            $query->leftJoin('stages as s', 's.event_id', '=', 'event_teams.event_id')
                ->leftJoin('matches as m', function ($join) use ($stage_ids) {
                    $join->on('m.stage_id', '=', 's.id')->whereNull('m.deleted_at');
                })
                ->leftJoin('match_event_teams as met', function ($join) {
                    $join->on('met.event_team_id', '=', "event_teams.id");
                    $join->on('met.match_id', '=', 'm.id');
                })
                ->where('event_teams.event_id', $event_id)
                ->whereIn('event_teams.id', $event_team_ids)
                ->selectRaw("
                    event_teams.id, 
                    event_teams.team_id,
                    event_teams.name,
                    COALESCE(SUM(met.final_score), 0) as score
                    ")
                ->groupBy("event_teams.id")
                ->orderByRaw("score DESC");
            $ranktable['rank_table'] = $query->get();
        }
        return response()->json($ranktable);
    }

    public function noneStageEventAdward(Request $request)
    {
        try {
            DB::beginTransaction();
            $event_id = $request->event_id;
            $rank_table = $request->rank_tables;
            if ($request->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']) {
                foreach ($rank_table as $competitor) {
                    if ($competitor['qualification_type'] == null) {
                        $eqc = EventQualificationCompetitor::query()->where('event_id', $event_id)
                            ->where('participant_id', $competitor['id'])
                            ->where('team_id', $competitor['team_id'])
                            ->first();
                        if ($eqc) {
                            $eqc->delete();
                        }
                    } else {
                        EventQualificationCompetitor::query()->updateOrCreate(
                            [
                                'event_id' =>  $event_id,
                                'participant_id' =>  $competitor['id'],
                                'team_id' => $competitor['team_id']
                            ],
                            [
                                'qualification_type' => $competitor['qualification_type']
                            ]
                        );
                    }
                }
            }
            if ($request->competition_type == SportDisciplineEvent::competition_type['TEAM']) {
                foreach ($rank_table as $competitor) {
                    if ($competitor['qualification_type'] == null) {
                        $eqc = EventQualificationCompetitor::query()->where('event_id', $event_id)
                            ->where('event_team_id', $competitor['id'])
                            ->where('team_id', $competitor['team_id'])
                            ->first();
                        if ($eqc) {
                            $eqc->delete();
                        }
                    } else {
                        EventQualificationCompetitor::query()->updateOrCreate(
                            [
                                'event_id' =>  $event_id,
                                'event_team_id' =>  $competitor['id'],
                                'team_id' => $competitor['team_id']
                            ],
                            [
                                'qualification_type' => $competitor['qualification_type']
                            ]
                        );
                    }
                }
            }
            DB::commit();
            return $this->resultResponse(1);
        } catch (\Exception $e) {
            DB::rollBack();
            return $this->errorResponseSystem();
        }
    }
}
