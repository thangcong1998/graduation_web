<?php

namespace App\Http\Controllers\Admin;

use App\Exports\DataExport;
use App\Models\Match;
use App\Models\SportDiscipline;
use App\Models\SportDisciplineEvent;
use App\Models\EvenStatisticMatchRelation;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiResourceController;
use App\Models\Country;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests\CountryCreateRequest;
use App\Http\Requests\CountryUpdateRequest;
use Maatwebsite\Excel\Facades\Excel;
use App\Helpers\SyncDataSeagameGms;
use App\Http\Requests\MatchCreateRequest;
use App\Http\Requests\MatchUpdateRequest;
use App\Models\EventStatistic;
use App\Models\MatchEventTeam;
use App\Models\MatchIndividualCompetitor;
use App\Models\MatchRound;
use App\Models\MatchRoundResult;
use App\Models\MatchRoundResultRefereeRelation;
use App\Models\MatchSet;
use App\Models\MatchSetResult;
use App\Models\MatchSetGameResult;
use App\Models\MatchSubCriteriasRelation;
use App\Models\Stage;
use App\Models\StageQualificationCompetitor;
use App\Models\StageSubCriteriasRelation;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Models\CompetitorVenue;

class MatchController extends ApiResourceController
{
    protected function setModel()
    {
        $this->model = new Match();
    }

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function store(MatchCreateRequest $request)
    {
        try{
            DB::beginTransaction();
            $data = $request->only($this->model->getFillable());
            $result = $this->query->create($data);
            $venue = CompetitorVenue::query()->where('id', $result->venue_id)->first();
            if($venue) {
                $code = $result->id.$venue->code;
            }
            $result->update([
                'code' => $code
            ]);
            $stage = Stage::query()->with('event')->where('id', $request->stage_id)->first();
            $event_cp_type = $stage['event']->competition_type;
            if (isset($request->event_group_id)) {
                if($event_cp_type == 1) {
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $result->id,
                            'competitor_id' => $val['competitor_id'],
                            'event_group_member_id' => $val['event_group_member_id']
                        ];
                    }
                    DB::table('match_individual_competitors')->insert($cps);
                }
                if($event_cp_type == 2) {
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $result->id,
                            'event_team_id' => $val['competitor_id'],
                            'event_group_member_id' => $val['event_group_member_id']
                        ];
                    }
                    DB::table('match_event_teams')->insert($cps);
                }
            } else {
                if($event_cp_type == 1) {
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $result->id,
                            'competitor_id' => $val,
                        ];
                    }
                    DB::table('match_individual_competitors')->insert($cps);
                }
                if($event_cp_type == 2) {
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $result->id,
                            'event_team_id' => $val,
                        ];
                    }
                    DB::table('match_event_teams')->insert($cps);
                }
            }

            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.create_result_response'),
                'id' => $result->id
            ]);
        } catch(\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function update(MatchUpdateRequest $request, $id)
    {
        try {
            DB::beginTransaction();
            $data = $request->only($this->model->getFillable());
            $item = $this->query->where('id', $id)->first();
            if(!$item->code) {
                $venue = CompetitorVenue::query()->where('id', $data['venue_id'])->first();
                if($venue) {
                    $data['code'] = $id.$venue->code;
                }
            }

            $item->fill($data);
            $result = $item->update();

            $stage = Stage::query()->with('event')->where('id', $request->stage_id)->first();
            $event_cp_type = $stage['event']->competition_type;
            if (isset($request->event_group_id)) {
                if($event_cp_type == 1) {
                    DB::table('match_individual_competitors')->where('match_id', $id)->delete();
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $id,
                            'competitor_id' => $val['competitor_id'],
                            'event_group_member_id' => $val['event_group_member_id']
                        ];
                    }
                    DB::table('match_individual_competitors')->insert($cps);
                }
                if($event_cp_type == 2) {
                    DB::table('match_event_teams')->where('match_id', $id)->delete();
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $id,
                            'event_team_id' => $val['competitor_id'],
                            'event_group_member_id' => $val['event_group_member_id']
                        ];
                    }
                    DB::table('match_event_teams')->insert($cps);
                }
            } else {
                if($event_cp_type == 1) {
                    DB::table('match_individual_competitors')->where('match_id', $id)->delete();
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $id,
                            'competitor_id' => $val,
                        ];
                    }
                    DB::table('match_individual_competitors')->insert($cps);
                }
                if($event_cp_type == 2) {
                    DB::table('match_event_teams')->where('match_id', $id)->delete();
                    $cps = [];
                    foreach($request->competitors as $val) {
                        $cps[] = [
                            'match_id' => $id,
                            'event_team_id' => $val,
                        ];
                    }
                    DB::table('match_event_teams')->insert($cps);
                }
            }

            DB::commit();
            return $this->resultResponse($result);
        } catch(\Exception $e) {
            DB::rollBack();
            throw $e;
            return $this->errorResponse();
        }
    }

    public function destroy(Request $request, $id)
    {
        $action = $request->get('action', 'delete');
        if ($action !== 'delete') {
            $this->query->withTrashed();
        }
        $data = $this->query->find($id);
        $stage_id = $data->stage_id;
        if (!$data) {
            return $this->errorResponse();
        }
        if ($action === 'restore') {
            $result = $data->restore();
            return $this->restoreResultResponse($result);
        } elseif ($action === 'force') {
            $result = $data->forceDelete();
        } else {
            $result = $data->delete();
            $data->match_sub_criterias_relations()->update(['value' => 0]);
            $match_sub_criterias = MatchSubCriteriasRelation::query()
            ->selectRaw('event_id, sub_criteria_id, match_sub_criterias_relations.stage_id,competitor_id, event_team_id, sum(value) as total_value')
            ->where('match_sub_criterias_relations.stage_id',   $stage_id)
            ->groupBy('sub_criteria_id', 'event_team_id', 'event_id', 'match_sub_criterias_relations.stage_id', 'competitor_id')
            ->get();
            foreach($match_sub_criterias as $msc) {
                StageSubCriteriasRelation::query()->updateOrCreate([
                        'event_id' => $msc->event_id,
                        'sub_criteria_id' => $msc->sub_criteria_id,
                        'stage_id' => $msc->stage_id,
                        'event_team_id' => $msc->event_team_id,
                        'competitor_id' => $msc->competitor_id
                    ],
                    [
                        'total_value' => $msc->total_value
                    ]
                );
            }
        }
        return $this->deleteResultResponse($result);
    }

    public function addFilter($request)
    {
        $this->query->with(
            'stage.event.venue',
            'venue',
            'stage.event.sportDiscipline',
            'event_group',
            'event_group.group_members',
            'event_group.group_members.participant',
            'event_group.group_members.event_team',
            'event_group.group_members.event_team.Team.Country',
            'event_group.group_members.event_team.event_team_competitor',
            'stage.event.function_referee',
            'stage.event.referee',
            'stage.event.referee.nationality',
            'stage.event_rounds',
            'round.result.match_round_result_referee_relation.foul',
            'round.result.match_round_result_referee_relation.referee',
            'round.event_round',
            'round.result.competitor',
            'round.result.event_team',
            "venue",
            'venue.venue_relation.event_field.position_field',
            'stage.stage_qualification_settings',
            'stage.stage_qualification_competitors',
        )->orderBy("event_date", 'asc');
        if ($request->event_date) {
            $this->query->whereDate('event_date', '=', $request->event_date);
        }
        if ($request->sport_discipline_id) {
            $event_id = [];
            $array_events = SportDisciplineEvent::query()->where('sport_discipline_id', $request->sport_discipline_id)->get();
            foreach ($array_events as $array_event) {
                array_push($event_id, $array_event['id']);
            }
            $this->query->whereHas('stage', function ($query) use ($event_id) {
                return $query->whereIn('event_id', $event_id);
            });
        }
        if($request->sport_discipline_event_id) {
            $event_id = $request->sport_discipline_event_id;
            $this->query->whereHas('stage', function ($query) use ($event_id) {
                return $query->where('event_id', $event_id);
            });
        }
    }

    public function storeMatch1vs1(Request $request){
        DB::beginTransaction();
        try{
            $round = json_decode($request->round);
            $member1 = $request->member1;
            $member2 = $request->member2;
            foreach($round as $rd){
                $match_round = MatchRound::updateOrCreate([
                    'event_round_id'=>$rd->id,
                    'match_id'=>$request->match_id,
                ],
                [
                    'event_round_id'=>$rd->id,
                    'match_id'=>$request->match_id,
                    'name'=>$rd->name,
                ]);
                foreach($rd->result as $result){
                    if($request->competition_type == 1){
                        $match_round_result =  MatchRoundResult::create([
                            'match_round_id'=>$match_round->id,
                            'competitor_id'=>$result->competitor_id,
                            'match_individual_competitor_id'=>$result->id,
                            'score'=>$result->resultScore,
                            'is_ko'=>isset($result->is_ko) ? $result->is_ko : 0,
                        ]);
                        if($result->competitor_id ==  $member1['competitor_id']){
                            $match_individual_competitor = MatchIndividualCompetitor::query()->where('competitor_id',$result->competitor_id)
                            ->where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                                ]);
                            }
                            $match_individual_competitor->update([
                                "final_score"=>$request->scoreA,
                                "match_point"=>$request->matchPointA,
                                "lose_score"=>$request->lose_scoreA,
                            ]);
                        }else{
                            $match_individual_competitor = MatchIndividualCompetitor::query()
                                ->where('competitor_id',$result->competitor_id)
                                ->where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                                ]);
                            }
                            $match_individual_competitor->update([
                                "final_score"=>$request->scoreB,
                                "match_point"=>$request->matchPointB,
                                "lose_score"=>$request->lose_scoreB,
                            ]);
                        };
                        if(isset($result->referee)){
                            foreach($result->referee as $re){
                                MatchRoundResultRefereeRelation::create([
                                    'match_round_result_id'=>$match_round_result->id,
                                    'match_referee_id'=>$re->id,
                                    'score'=>$re->score,
                                    'referee_id'=>$re->referee_id,
                                ]);
                            }
                        }
                    }else {
                        // return $member1;
                    // return response()->json($result);
                        $match_round_result = MatchRoundResult::create([
                            'match_round_id'=>$match_round->id,
                            'event_team_id'=>$result->event_team_id,
                            'match_event_team_id'=>$result->id,
                            'score'=>$result->resultScore,
                            'is_ko'=>isset($result->is_ko)  ? $result->is_ko : 0,
                        ]);
                        if($result->event_team_id == $member1['event_team_id']){
                           $match_event_team =  MatchEventTeam::query()->where('event_team_id',$result->event_team_id)
                            ->where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['WIN']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['LOSE']
                                ]);
                            }
                            $match_event_team->update([
                                "final_score"=>$request->scoreA,
                                "match_point"=>$request->matchPointA,
                                "lose_score"=>$request->lose_scoreA,
                            ]);
                        }else{
                            $match_event_team =  MatchEventTeam::query()->where('event_team_id',$result->event_team_id)->
                            where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['LOSE']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['WIN']
                                ]);
                            }
                            $match_event_team->update([
                                "final_score"=>$request->scoreB,
                                "match_point"=>$request->matchPointB,
                                "lose_score"=>$request->lose_scoreB,
                            ]);
                        }
                        if(!empty($result->referee)){
                            foreach($result->referee as $re){
                            MatchRoundResultRefereeRelation::create([
                                'match_round_result_id'=>$match_round_result->id,
                                'match_referee_id'=>$re->id,
                                'score'=>$re->score,
                                'referee_id'=>$re->referee_id,
                            ]);
                        }}
                    }
                };
            }
            if($request->qualified_to_stage_id){
                foreach($request->qualified_to_stage_id as $q){
                    if($q['qualification_type'] == 1){
                         $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                        //  return $qualifcationToStage;
                    }else{
                     $qualification = $this->qualification($request,$request->member1,$request->member2);
                    }
                }
            }else{
                $qualification = $this->qualification($request,$request->member1,$request->member2);

            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_match_result'),
                200
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    public function updateMatch1vs1(Request $request){
        try{
           DB::beginTransaction();
            $round = json_decode($request->round);
            $member1 = $request->member1;
            $member2 = $request->member2;
            // return $request;
            foreach($round as $rd){
                MatchRound::query()->where('event_round_id',$rd->event_round_id)
                ->where('match_id',$request->match_id)->update([
                    'name'=>$rd->name,
                ]);
                $match_round = MatchRound::query()->where('event_round_id',$rd->event_round_id)
                ->where('match_id',$request->match_id)->first();
                foreach($rd->result as $result){
                    if($request->competition_type == 1){
                        MatchRoundResult::query()->where('match_round_id',$match_round->id)
                        ->where("competitor_id",$result->competitor_id)->update([
                            'score'=>$result->resultScore,
                            'is_ko'=>$result->is_ko,
                        ]);
                        if($result->competitor_id ==  $member1['competitor_id']){
                            $match_individual_competitor =  MatchIndividualCompetitor::query()->where('match_id',$request->match_id)
                            ->where('competitor_id',$result->competitor_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                                ]);
                            }
                            $match_individual_competitor->update([
                                "final_score"=>$request->scoreA,
                                "match_point"=>$request->matchPointA,
                                "lose_score"=>$request->lose_scoreA,
                            ]);
                        }else{
                            $match_individual_competitor = MatchIndividualCompetitor::query()->where('competitor_id',$result->competitor_id)->
                            where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_individual_competitor->update([
                                    "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                                ]);
                            }
                            $match_individual_competitor->update([
                                "final_score"=>$request->scoreB,
                                "match_point"=>$request->matchPointB,
                                "lose_score"=>$request->lose_scoreB,
                            ]);
                        };
                        if(isset($result->referee)){
                            foreach($result->referee as $re){
                                MatchRoundResultRefereeRelation::query()->where('match_round_result_id',$re->match_round_result_id)
                                ->where('match_referee_id',$re->match_referee_id)->update(['score'=>$re->score]);
                            }
                        }
                    }else {
                        MatchRoundResult::query()->where('match_round_id',$result->match_round_id)
                            ->where("event_team_id",$result->event_team_id)->update([
                            'score'=>$result->resultScore,
                            'is_ko'=>$result->is_ko,
                        ]);
                        if($result->event_team_id == $member1['event_team_id']){
                           $match_event_team =  MatchEventTeam::query()->where('event_team_id',$result->event_team_id)->
                            where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['WIN']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['LOSE']
                                ]);
                            }
                            $match_event_team->update([
                                "final_score"=>$request->scoreA,
                                "match_point"=>$request->matchPointA,
                                "lose_score"=>$request->lose_scoreA,
                                
                            ]);
                        }else{
                            $match_event_team = MatchEventTeam::query()->where('event_team_id',$result->event_team_id)->
                            where('match_id',$request->match_id)->first();
                            if($request->scoreA == $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['DRAW']
                                ]);
                            }
                            if($request->scoreA > $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['LOSE']
                                ]);
                            }
                            if($request->scoreA < $request->scoreB){
                                $match_event_team->update([
                                    "is_winner"=> MatchEventTeam::is_winner['WIN']
                                ]);
                            }
                            $match_event_team->update([
                                "final_score"=>$request->scoreB,
                                "match_point"=>$request->matchPointB,
                                "lose_score"=>$request->lose_scoreB,
                            ]);
                        }
                        if(isset($result->referee)){
                            foreach($result->referee as $re){
                                MatchRoundResultRefereeRelation::query()->where('match_round_result_id',$re->match_round_result_id)
                                ->where('match_referee_id',$re->match_referee_id)->update(['score'=>$re->score]);
                            }
                        }
                    }
                };
            }
            if($request->qualified_to_stage_id){
                foreach($request->qualified_to_stage_id as $q){
                    if($q['qualification_type'] == 1){
                         $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                    }else{
                     $qualification = $this->qualification($request,$request->member1,$request->member2);
                    }
                }
            }else{
                $qualification = $this->qualification($request,$request->member1,$request->member2);
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_match_result')
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            return $this->errorResponseSystem($e);
        }
    }

    public function storeMatch1vs1Set(Request $request){
        try {
            DB::beginTransaction();
            // return $request;
            $set = json_decode($request->set,true);
            $member1 = $request->member1;
            $member2 = $request->member2;
            foreach($set as $key => $s){
                // return response()->json($s);
                if($request->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']){
                    $match_set = MatchSet::updateOrCreate([
                        "match_id"=> $request->match_id,
                        "set_no"=>$key + 1,
                    ],
                    [
                        "match_id"=> $request->match_id,
                        "set_no"=>$key + 1,
                        "match_invididual_win"=>$request->matchIndividualWin ? $request->matchIndividualWin
                        :  $s['match_invididual_win'],
                        "event_set_id"=>$s["event_set_id"],
                    ]);
                    // return $s;
                    foreach($s['match_individual_competitors'] as $setScore){
                    //  return response()->json($setScore);
                        $match_set_result = MatchSetResult::updateOrCreate([
                            "match_set_id"=>$match_set->id,
                            "competitor_id"=>$setScore['competitor_id'],
                        ],
                        [
                            "match_set_id"=>$match_set->id,
                            "match_individual_competitor_id"=> $setScore['id'],
                            "score"=>isset($setScore['totalScore']) ? $setScore['totalScore'] : 0,
                            "competitor_id"=>$setScore['competitor_id'],
                            "set_point"=>isset($setScore['setPoint']) ? $setScore['setPoint'] : null,
                        ]);
                        foreach($s['game_result'] as $key1 => $gam){
                            $set_game_no = $key1++;
                            foreach($gam['result'] as $re){
                                // return response()->json($re);
                                MatchSetGameResult::updateOrCreate([
                                    'match_set_id'=>$match_set->id,
                                    'set_game_no'=>$set_game_no,
                                    'match_set_result_id'=>$match_set_result->id,
                                    "competitor_id"=>$re['competitor_id'],
                                    'match_individual_competitor_id'=>$re['match_individual_competitor_id'],
                                ],
                                [
                                    'match_set_result_id'=>$match_set_result->id,
                                    'match_set_id'=>$match_set->id,
                                    'set_game_no'=>$set_game_no,
                                    'match_individual_competitor_id'=>$re['match_individual_competitor_id'],
                                    'score'=>$re['resultScore'],
                                    'competitor_id'=>$re['competitor_id'],
                                ]);
                                MatchIndividualCompetitor::updateOrCreate([
                                    "id"=>$re['match_individual_competitor_id']
                                ],[
                                    "match_point"=>$re['competitor_id'] == $member1['competitor_id'] ? $request->matchPointA : $request->matchPointB,
                                    "lose_score"=>$re['competitor_id'] == $member1['competitor_id'] ? $request->lose_scoreA : $request->lose_scoreB,
                                    "final_score"=>$re['competitor_id'] == $member1['competitor_id'] ? $request->scoreA : $request->scoreB,
                                ]);
                            }
                        }
                    }
                }
               if($request->competition_type == SportDisciplineEvent::competition_type['TEAM']){
                $match_set = MatchSet::create([
                    "match_id"=> $request->match_id,
                    "set_no"=>$key + 1,
                    "match_event_team_win"=>$request->matchEventTeamWin ? $request->matchEventTeamWin
                    :$s['match_event_team_win'],
                    "event_set_id"=>$s["id"],
                ]);
                // return response()->json($s);
                foreach($s['match_event_teams'] as $setScore){
                     
                        $match_set_result = MatchSetResult::updateOrCreate([
                            "match_set_id"=>$match_set->id,
                            "event_team_id"=>$setScore['event_team_id'],
                        ],
                        [
                            "match_set_id"=>$match_set->id,
                            "match_event_team_id"=> $setScore['id'],
                            "score"=>isset($setScore['totalScore']) ? $setScore['totalScore'] : 0,
                            "event_team_id"=>$setScore['event_team_id'],
                            "set_point"=>isset($setScore['setPoint']) ? $setScore['setPoint'] : null,
                        ]);
                    foreach($s['game_result'] as $key1 => $gam){
                        $set_game_no = $key1++;
                        foreach($gam['result'] as $re){
                    //  return response()->json($re);
                            MatchSetGameResult::updateOrCreate([
                                'match_set_id'=>$match_set->id,
                                'set_game_no'=>$set_game_no,
                                'match_set_result_id'=>$match_set_result->id,
                                'event_team_id'=>$re['event_team_id'],
                                'match_event_team_id'=>$re['match_event_team_id'],
                            ],[
                                'match_set_result_id'=>$match_set_result->id,
                                'match_set_id'=>$match_set->id,
                                'set_game_no'=>$set_game_no,
                                'match_event_team_id'=>$re['match_event_team_id'],
                                'score'=>$re['resultScore'],
                                'event_team_id'=>$re['event_team_id'],
                            ]);
                            MatchIndividualCompetitor::updateOrCreate([
                                "id"=>$re['match_event_team_id']
                            ],[
                                "match_point"=>$re['event_team_id'] == $member1['event_team_id'] ? $request->matchPointA : $request->matchPointB,
                                "final_score"=>$re['event_team_id'] == $member1['event_team_id'] ? $request->scoreA : $request->scoreB,
                                "lose_score"=>$re['event_team_id'] == $member1['event_team_id'] ? $request->lose_scoreA : $request->lose_scoreB,
                            ]);
                        }
                    }
                }
               }
            }
            if($request->qualified_to_stage_id){
                foreach($request->qualified_to_stage_id as $q){
                    if($q['qualification_type'] == 1){
                         $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                    }else{
                     $qualification = $this->qualification($request,$request->member1,$request->member2);
                    }
                }
            }else{
                $qualification = $this->qualification($request,$request->member1,$request->member2);
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_match_result'),
                200
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    public function updateMatch1vs1Set(Request $request){
        try {
            DB::beginTransaction();
            $member1 = $request->member1;
            $member2 = $request->member2;
            $set = json_decode($request->set,true);
            foreach($set as $key => $s){
                if($request->competition_type == SportDisciplineEvent::competition_type['INDIVIDUAL']){
                    if($s['match_invididual_win']){
                        MatchSet::query()->where('match_id',$request->match_id)->where('id',$s['id'])->update([
                            "match_invididual_win"=>$request->matchIndividualWin ? $request->matchIndividualWin
                            : $s['match_invididual_win'],
                        ]);
                    }
                    $match_set = MatchSet::query()->where('match_id',$request->match_id)->where('id',$s['id'])->first();
                    foreach($s['game_result'] as $gam){
                        foreach($gam['result'] as $re){
                            MatchSetGameResult::query()->where('match_set_id',$match_set->id)->where('match_individual_competitor_id',$re['competitor_id']
                            )->where('set_game_no',$re['set_game_no'])->update([
                                'score'=>$re['resultScore'],
                            ]);
                        }
                    }
                }
                if($request->competition_type == SportDisciplineEvent::competition_type['TEAM']){
                    if($s['match_event_team_win']){
                        MatchSet::query()->where('match_id',$request->match_id)->where('id',$s['id'])->update([
                            "match_event_team_win"=> $request->matchEventTeamWin ? $request->matchEventTeamWin
                            :$s['match_event_team_win'],
                        ]);
                    }
                    $match_set = MatchSet::query()->where('match_id',$request->match_id)->where('id',$s['id'])->first();
                    foreach($s['game_result'] as $gam){
                        foreach($gam['result'] as $re){
                          MatchSetGameResult::query()->where('match_set_id',$match_set->id)->where('match_event_team_id',$re['match_event_team_id']
                            )->where('set_game_no',$re['set_game_no'])->update([
                                'score'=>$re['resultScore'],
                            ]);

                        }
                    }
                }
            }
            // return $request;
            if($request->qualified_to_stage_id){
                foreach($request->qualified_to_stage_id as $q){
                    if($q['qualification_type'] == 1){
                         $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                        //  return $qualifcationToStage;
                    }else{
                     $qualification = $this->qualification($request,$request->member1,$request->member2);
                    //  return $qualification;
                    }
                }
            }else{
                $qualification = $this->qualification($request,$request->member1,$request->member2);
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_match_result')
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem($e);
        }
    }

    public function updateStatistic1vs1(Request $request){
        try{
            DB::beginTransaction();
            $sta = $request->statistic;
            foreach($sta as $st){
                foreach($st['statistic'] as $t){
                    EvenStatisticMatchRelation::updateOrCreate([
                        "id"=>$t['id'],
                    ],[
                        "event_statistic_id"=>$st['event_statistic_id'],
                        "match_id"=>$st['match_id'],
                        "value"=>$t['value'],
                        "event_team_id"=>isset($t['event_team_id']) ? $t['event_team_id'] : null,
                        "competitor_id"=>isset($t['competitor_id']) ? $t['competitor_id'] : null,
                    ]);
                }
            }
            $sub_criterias = $request->sub_criterias;
            foreach( $sub_criterias as $subs) {
                foreach($subs as $sub) {
                    MatchSubCriteriasRelation::query()->updateOrCreate(
                        [
                            'event_id' => $sub['event_id'],
                            'match_id' => $sub['match_id'],
                            'stage_id' => $sub['stage_id'],
                            'sub_criteria_id' => $sub['sub_criteria_id'],
                            'event_team_id' => isset($sub['event_team_id']) ? $sub['event_team_id'] : null,
                            'competitor_id' => isset($sub['competitor_id']) ? $sub['competitor_id'] : null
                        ],
                        [
                            'value' => $sub['value']
                        ]
                    );
                }
            }
            $match_sub_criterias = MatchSubCriteriasRelation::query()
            ->selectRaw('event_id, sub_criteria_id, match_sub_criterias_relations.stage_id,competitor_id, event_team_id, sum(value) as total_value')
            ->where('match_sub_criterias_relations.stage_id', $request->stage_id)
            ->groupBy('sub_criteria_id', 'event_team_id', 'event_id', 'match_sub_criterias_relations.stage_id', 'competitor_id')
            ->get();
            foreach($match_sub_criterias as $msc) {
                StageSubCriteriasRelation::query()->updateOrCreate([
                        'event_id' => $msc->event_id,
                        'sub_criteria_id' => $msc->sub_criteria_id,
                        'stage_id' => $msc->stage_id,
                        'event_team_id' => $msc->event_team_id,
                        'competitor_id' => $msc->competitor_id
                    ],
                    [
                        'total_value' => $msc->total_value
                    ]
                );
            }

            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_statistic_result')
            ]);
        }catch(\Exception $e){
            DB::rollBack();
        }
    }

    public function updateStatistic1vsN(Request $request){
        try{
            DB::beginTransaction();
            $sta = $request->statistic;
            foreach($sta as $st){
                foreach($st['statistic'] as $t){
                    EvenStatisticMatchRelation::updateOrCreate([
                        "id"=>isset($t['id']) && $t['id'],
                    ],[
                        "event_statistic_id"=>$t['event_statistic_id'],
                        "match_id"=>$st['match_id'],
                        "value"=>$t['value'],
                        "event_team_id"=>isset($st['event_team_id']) ? $st['event_team_id'] : null,
                        "competitor_id"=>isset($st['competitor_id']) ? $st['competitor_id'] : null,
                    ]);
                }
            }
            $sub_criterias = $request->sub_criterias;
            foreach($sub_criterias as $subs) {
                foreach($subs as $sub) {
                    MatchSubCriteriasRelation::query()->updateOrCreate(
                        [
                            'event_id' => $sub['event_id'],
                            'match_id' => $sub['match_id'],
                            'stage_id' => $sub['stage_id'],
                            'sub_criteria_id' => $sub['sub_criteria_id'],
                            'event_team_id' => isset($sub['event_team_id']) ? $sub['event_team_id'] : null,
                            'competitor_id' => isset($sub['competitor_id']) ? $sub['competitor_id'] : null
                        ],
                        [
                            'value' => $sub['value']
                        ]
                    );
                }
            }

            $match_sub_criterias = MatchSubCriteriasRelation::query()
            ->selectRaw('event_id, sub_criteria_id, stage_id,competitor_id, event_team_id, sum(value) as total_value')
            ->where('stage_id', $request->stage_id)
            ->groupBy('sub_criteria_id', 'event_team_id', 'event_id', 'stage_id', 'competitor_id')
            ->get();
            foreach($match_sub_criterias as $msc) {
                StageSubCriteriasRelation::query()->updateOrCreate([
                        'event_id' => $msc->event_id,
                        'sub_criteria_id' => $msc->sub_criteria_id,
                        'stage_id' => $msc->stage_id,
                        'event_team_id' => $msc->event_team_id,
                        'competitor_id' => $msc->competitor_id
                    ],
                    [
                        'total_value' => $msc->total_value
                    ]
                );
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.update_statistic_result')
            ]);
        }catch(\Exception $e){
            DB::rollBack();
        }
    }
    public function update1vs1NoRound(Request $request){
        try{
            DB::beginTransaction();
            if($request->competition_type == 1){
                if($request->member1['competitor_id']){
                    MatchIndividualCompetitor::query()->where("match_id",$request->match_id)
                        ->where("competitor_id",$request->member1['competitor_id'])->update([
                        "match_point"=>$request->matchPointA,
                        "is_winner"=>$request->is_winnerA,
                    ]);
                }
                if($request->member2['competitor_id']){
                    MatchIndividualCompetitor::query()->where("match_id",$request->match_id)
                    ->where("competitor_id",$request->member2['competitor_id'])->update([
                        "match_point"=>$request->matchPointB,
                        "is_winner"=>$request->is_winnerB,
                    ]);
                }
            }else{
                if($request->member1['event_team_id']){
                    MatchEventTeam::query()->where("match_id",$request->match_id)
                        ->where("event_team_id",$request->member1['event_team_id'])->update([
                        "match_point"=>$request->matchPointA,
                        "is_winner"=>$request->is_winnerA,
                    ]);
                }
                if($request->member2['event_team_id']){
                    MatchEventTeam::query()->where("match_id",$request->match_id)
                    ->where("event_team_id",$request->member2['event_team_id'])->update([
                        "match_point"=>$request->matchPointB,
                        "is_winner"=>$request->is_winnerB,
                    ]);
                }
            }
            if($request->qualified_to_stage_id){
                foreach($request->qualified_to_stage_id as $q){
                    if($q['qualification_type'] == 1){
                         $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                    }else{
                     $qualification = $this->qualification($request,$request->member1,$request->member2);
                    }
                }
            }else{
                $qualification = $this->qualification($request,$request->member1,$request->member2);
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.result_response'),
                200
            ]);
        }catch(\Exception $e){
            DB::rollBack();
        }
    }

    public function qualifcationToStage($request,$member1,$member2){
        try{
            DB::beginTransaction();
            foreach($request->qualified_to_stage_id as $qua){
                if($request->competition_type == 1 ){
                    if($member1['competitor_id'] && $qua['qualified_to_stage_id'] == $request->qualificationA){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "participant_id"=>$member1['competitor_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationA >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "participant_id"=>$member1['competitor_id'],
                            "team_id"=>$member1['competitor']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationA > 1 ? $request->qualificationA : null,
                        ]);
                    }
                    if($member1['competitor_id'] && $request->qualificationA == 0){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "participant_id"=>$member1['competitor_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationA >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "participant_id"=>$member1['competitor_id'],
                            "team_id"=>$member1['competitor']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationA > 1 ? $request->qualificationA : null,
                        ]);
                    }
                    if($member2['competitor_id'] && $qua['qualified_to_stage_id'] == $request->qualificationB){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "participant_id"=>$member2['competitor_id'],
                        ]
                        ,[
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationB >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "participant_id"=>$member2['competitor_id'],
                            "team_id"=>$member2['competitor']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationB ? $request->qualificationB  : null
                        ]);
                    };
                    if($member2['competitor_id'] && $request->qualificationB == 0){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "participant_id"=>$member2['competitor_id'],
                        ]
                        ,[
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationB >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "participant_id"=>$member2['competitor_id'],
                            "team_id"=>$member2['competitor']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationB ? $request->qualificationB  : null
                        ]);
                    };
                }else {
                    if($member1['event_team_id'] && $qua['qualified_to_stage_id'] == $request->qualificationA){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "event_team_id"=>$member1['event_team_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationA  >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "event_team_id"=>$member1['event_team_id'],
                            "team_id"=>$member1['event_team']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationA ?  $request->qualificationA : null,
                        ]);
                    }
                    if($member1['event_team_id'] && $request->qualificationA == 0){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "event_team_id"=>$member1['event_team_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationA  >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "event_team_id"=>$member1['event_team_id'],
                            "team_id"=>$member1['event_team']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationA ?  $request->qualificationA : null,
                        ]);
                    }
                    if($member2['event_team_id'] && $qua['qualified_to_stage_id'] == $request->qualificationB){
                        // return $member2;
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "event_team_id"=>$member2['event_team_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationB  >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "event_team_id"=>$member2['event_team_id'],
                            "team_id"=>$member2['event_team']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationB ? $request->qualificationB : null,
                        ]);
                    }
                    if($member2['event_team_id'] && $request->qualificationB == 0){
                        StageQualificationCompetitor::updateOrCreate([
                            "stage_id"=>$request->stage_id,
                            "event_team_id"=>$member2['event_team_id'],
                        ],
                        [
                            "stage_id"=>$request->stage_id,
                            "qualification_type"=>$request->qualificationB  >= 1 ? StageQualificationCompetitor::qualification_type['qualified'] : 0,
                            "event_team_id"=>$member2['event_team_id'],
                            "team_id"=>$member2['event_team']['team_id'],
                            // "match_id"=>$request->match_id,
                            "qualified_to_stage_id"=>$request->qualificationB ? $request->qualificationB : null,
                        ]);
                    }
                }
            }
            DB::commit();
            return 1;
        }catch(\Exception $e){
            DB::rollBack();
            $this->errorResponseSystem();
        }
    }

    public function qualification($request,$member1,$member2){
        try{
            DB::beginTransaction();
            foreach($request->qualified_to_stage_id as $qua){
                if($request->competition_type == 1){
                    if($member1['competitor_id']){
                        if($qua['qualification_type'] == $request->qualificationA){
                            StageQualificationCompetitor::updateOrCreate([
                                "stage_id"=>$request->stage_id,
                                "participant_id"=>$member1['competitor_id'],
                            ],
                            [
                                "stage_id"=>$request->stage_id,
                                "qualification_type"=>$request->qualificationA,
                                "participant_id"=>$member1['competitor_id'],
                                "team_id"=>$member1['competitor']['team_id'],
                                // "match_id"=>$request->match_id,
                                "qualified_to_stage_id"=>$request->qualificationA == 1 ? $qua['id'] : null,
                            ]);
                        }
                    }
                    if($member2['competitor_id']){
                        if($qua['qualification_type'] == $request->qualificationB){
                            StageQualificationCompetitor::updateOrCreate([
                                "stage_id"=>$request->stage_id,
                                "participant_id"=>$member2['competitor_id'],
                            ],
                            [
                                "stage_id"=>$request->stage_id,
                                "qualification_type"=>$request->qualificationB,
                                "participant_id"=>$member2['competitor_id'],
                                "team_id"=>$member2['competitor']['team_id'],
                                // "match_id"=>$request->match_id,
                                "qualified_to_stage_id"=>$request->qualificationB == 1 ? $qua['id'] :null
                            ]);
                        }
                    };
                }else {
                    if($member1['event_team_id']){
                        if($qua['qualification_type'] == $request->qualificationA){
                            StageQualificationCompetitor::updateOrCreate(
                                [
                                    "stage_id"=>$request->stage_id,
                                    "event_team_id"=>$member1['event_team_id'],
                                    "team_id"=>$member1['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                ],
                                [
                                    "stage_id"=>$request->stage_id,
                                    "qualification_type"=>$request->qualificationA,
                                    "event_team_id"=>$member1['event_team_id'],
                                    "team_id"=>$member1['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                    "qualified_to_stage_id"=>$request->qualificationA == 1 ? $qua['id'] : null,
                                ]);
                        }
                        if($request->qualificationA == 0){
                            StageQualificationCompetitor::updateOrCreate(
                                [
                                    "stage_id"=>$request->stage_id,
                                    "event_team_id"=>$member1['event_team_id'],
                                    "team_id"=>$member1['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                ],
                                [
                                    "stage_id"=>$request->stage_id,
                                    "qualification_type"=>$request->qualificationA,
                                    "event_team_id"=>$member1['event_team_id'],
                                    "team_id"=>$member1['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                    "qualified_to_stage_id"=>$request->qualificationA == 1 ? $qua['id'] : null,
                                ]);
                        }

                    }
                    if($member2['event_team_id'] ){
                        if($qua['qualification_type'] == $request->qualificationB){
                            StageQualificationCompetitor::updateOrCreate(
                                [
                                    "stage_id"=>$request->stage_id,
                                    "event_team_id"=>$member2['event_team_id'],
                                    "team_id"=>$member2['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                ],
                                [
                                    "stage_id"=>$request->stage_id,
                                    "qualification_type"=>$request->qualificationB,
                                    "event_team_id"=>$member2['event_team_id'],
                                    "team_id"=>$member2['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                    "qualified_to_stage_id"=>$request->qualificationB == 1 ? $qua['id'] : null,
                                ]);
                        }
                        if($request->qualificationB == 0){
                            StageQualificationCompetitor::updateOrCreate(
                                [
                                    "stage_id"=>$request->stage_id,
                                    "event_team_id"=>$member2['event_team_id'],
                                    "team_id"=>$member2['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                ],
                                [
                                    "stage_id"=>$request->stage_id,
                                    "qualification_type"=>$request->qualificationB,
                                    "event_team_id"=>$member2['event_team_id'],
                                    "team_id"=>$member2['event_team']['team_id'],
                                    // "match_id"=>$request->match_id,
                                    "qualified_to_stage_id"=>$request->qualificationB == 1 ? $qua['id'] : null,
                                ]);
                        }
                    }
                }
            }
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.result_response'),
                200
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            throw $e;
            return $this->errorResponseSystem();
        }
    }

    public function update1vs1koNoRound(Request $request){
        try{
            DB::beginTransaction();
            $referee = json_decode($request->referee,true);
            $member1 = $request->member1;
            $member2 = $request->member2;
            $ko= $request->is_ko;
            // return $ko['competitor_id'];
            if($request->competition_type == 1){
                foreach($referee as $re){
                    foreach($re['result'] as $resu){
                        $match_round_result = MatchRoundResult::updateOrCreate([
                            'match_individual_competitor_id'=> $resu['id'],
                            "competitor_id" => $resu['competitor_id'],
                        ],
                        [
                            'match_individual_competitor_id'=> $resu['id'],
                            'score'=>$resu['resultScore'],
                        ]);
                        MatchRoundResultRefereeRelation::updateOrCreate([
                            "match_round_result_id"=>$match_round_result->id,
                            "referee_id"=>$re['referee_id'],
                        ],[
                            "match_round_result_id"=>$match_round_result->id,
                            "score"=>$resu['resultScore'],
                            "referee_id"=>$re['referee_id'],
                        ]);
                    }
                }
                if($request->member1['competitor_id']){
                    $match_individual_competitor =  MatchIndividualCompetitor::query()->where("match_id",$request->match_id)
                        ->where("competitor_id",$request->member1['competitor_id'])->first();
                    if($request->scoreA == $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                        ]);
                    }
                    if($request->scoreA > $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                        ]);
                    }
                    if($request->scoreA < $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                        ]);
                    }
                    $match_individual_competitor->update([
                        "final_score"=>$request->scoreA,
                        "match_point"=>$request->matchPointA,
                        'is_ko'=> $member1['competitor_id'] == $ko['competitor_id'] ? $ko['is_ko'] : null
                    ]);

                }
                if($request->member2['competitor_id']){
                   $match_individual_competitor = MatchIndividualCompetitor::query()->where("match_id",$request->match_id)
                    ->where("competitor_id",$request->member2['competitor_id'])->first();
                    if($request->scoreA == $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['DRAW']
                        ]);
                    }
                    if($request->scoreA > $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['LOSE']
                        ]);
                    }
                    if($request->scoreA < $request->scoreB){
                        $match_individual_competitor->update([
                            "is_winner"=> MatchIndividualCompetitor::is_winner['WIN']
                        ]);
                    }
                    $match_individual_competitor->update([
                        "final_score"=>$request->scoreB,
                        "match_point"=>$request->matchPointB,
                        'is_ko'=> $member2['competitor_id'] == $ko['competitor_id'] ? $ko['is_ko'] : null
                    ]);
                }
                if($request->qualified_to_stage_id){
                    foreach($request->qualified_to_stage_id as $q){
                        if($q['qualification_type'] == 1){
                             $qualifcationToStage = $this->qualifcationToStage($request,$request->member1,$request->member2);
                        }else{
                         $qualification = $this->qualification($request,$request->member1,$request->member2);
                        }
                    }
                }else{
                    $qualification = $this->qualification($request,$request->member1,$request->member2);
                }
            }else{}
            DB::commit();
            return $this->successResponse([
                'message' => Lang::get('response.response_message.result_response'),
                200
            ]);
        }catch(\Exception $e){
            DB::rollBack();
            throw $e;
        }
    }
    public function addAppend()
    {
        $this->query->with(
            'stage.event.venue',
            'stage.event.sportDiscipline.sport',
            'stage.event.eventTeam.event_team_competitor',
            'event_group.group_members.participant',
            'event_group.group_members.event_team.Team.Country',
            'event_group.group_members.event_team.event_team_competitor',
            'stage.event.event_rounds',
            'stage.event.function_referee',
            'stage.event.referee',
            'stage.event.referee.nationality',
            'stage.event_rounds',
            'stage.event_sets',
            'stage.fouls',
            'stage.event.sub_criterias',
            'stage.event.event_statistic.event_statistics_match_relations.event_team',
            'stage.match_points',
            'stage.round_points',
            'round.result.match_round_result_referee_relation.foul',
            'round.result.match_round_result_referee_relation.referee',
            'round.event_round',
            'round.result.competitor',
            'round.result.event_team.team',
            'match_event_team.result.match_round_result_referee_relation.foul',
            'event_teams.match_event_teams',
            'event_teams.match_event_teams.event_team',
            'event_teams.event_team_competitor',
            'event_teams.team',
            'event_teams.match_event_teams.member.competitor',
            'competitors',
            'venue',
            'stage.event.event_distinguish_player_method',
            'venue_event_field.position_field',
            'venue.venue_relation.event_field.position_field',
            'venue.venue_relation.event',
            'match_individual_competitors.line',
            'match_individual_competitors.line.event_field.position_field',
            'match_individual_competitors.competitor',
            'match_individual_competitors.match_sub_criterias_relations',
            'match_referee_relations.referee_role',
            'match_referee_relations.referee.nationality',
            'match_event_teams.member.competitor',
            'match_individual_competitors.result.match_round_result_referee_relation.foul',
            'stage.stage_qualification_settings.qualified_to_stage',
            'stage.stage_qualification_competitors',
            'stage.next_stage',
            'stage_qualification_competitor',
            'match_event_teams.event_team.team',
            'match_event_teams.result.match_round_result_referee_relation.foul',
            'match_event_team.event_team.team',
            'match_event_teams.member.competitor',
            'match_event_teams.match_sub_criterias_relations',
            'match_set.match_set_game_result',
            'match_set.match_set_result',
            'match_event_teams.event_team.event_team_competitor',
            'match_event_teams.event_team.uniforms',
            'event_statistics_match.event_team',
            'event_statistics_match.event_statistic',
            'event_statistics_match.competitor',
            'event_statistic.event_statistics_match_relations'
        );
    }
    public function storeReferee()
    {

    }
    public function all_match()
    {
        $data = Match::query()->with('stage.event.sportDiscipline')->get();
        return $data;
    }
}
